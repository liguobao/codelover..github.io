<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codelover&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codelover.link/"/>
  <updated>2016-10-22T14:27:09.575Z</updated>
  <id>http://codelover.link/</id>
  
  <author>
    <name>李国宝</name>
    <email>codelover@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用requirejs编写模块化代码</title>
    <link href="http://codelover.link/2016/10/22/javascript_requirejs_rf_code/"/>
    <id>http://codelover.link/2016/10/22/javascript_requirejs_rf_code/</id>
    <published>2016-10-21T16:00:00.000Z</published>
    <updated>2016-10-22T14:27:09.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最早接触javascript的时候，javascript代码直接扔在script标签里面就完事了。</p>
<p>反正代码不多，交互简单，逻辑不难，和HTML混在一起也未尝不可。</p>
<p>后来交互越来越复杂，代码越多越多了，我们就开始把JS代码独立到了单独的JS文件中。</p>
<p>公共的库引用在前，自己的逻辑代码引用在后，全局变量定义在HTML内部，在独立JS文件中直接使用变量就好。</p>
<p>我们会经常看到下面这种代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　　<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"5.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"6.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过script标签顺序去js管理依赖关系。</p>
<p>阮一峰老师在<a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">Javascript模块化编程（三）：require.js的用法</a><br>一文中总结了这样写法的缺点：</p>
<p>首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；</p>
<p>其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载.</p>
<p>当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>
<p>而requirejs的诞生便是为了解决这个问题。</p>
<h3 id="requirejs"><a href="#requirejs" class="headerlink" title="requirejs"></a><a href="http://requirejs.org/docs/download.html" target="_blank" rel="external">requirejs</a></h3><p>在<a href="http://requirejs.org/docs/download.html" target="_blank" rel="external">官网</a>把requirejs 下载回来之后。使用一般的方法引入：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>但是这样的方法，还是可能在加载require.js的时候导致网页失去响应。解决方案一般有两种：</p>
<ol>
<li><p>把上面的代码放到网页底部</p>
</li>
<li><p>使用异步的方法加载，如下：</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">"true"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://www.w3school.com.cn/html5/att_script_async.asp" target="_blank" rel="external">async属性</a> 表明这个文件需要异步加载，避免网页失去响应。</p>
<p>不过IE下不支持这个属性，只支持defer，所以可以把defer也写上。</p>
<h3 id="加载主模块"><a href="#加载主模块" class="headerlink" title="加载主模块"></a>加载主模块</h3><p>在上一步，我们已经引入了require了，那么require怎么知道我们究竟要加载什么东西呢？答案是使用data-main属性。<br>假设我们的主模块为js/home.js,引入代码应该如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">data-main</span>=<span class="string">"js/home"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">//require.js默认文件后缀为js，所以home.js可以写成home。</div></pre></td></tr></table></figure></p>
<p>接下来我使用<a href="https://github.com/liguobao/58HouseSearch" target="_blank" rel="external">58HouseSearch</a> 的代码来讲解一下require的使用。</p>
<p>在此项目里面，重构前大概就是JS变量漫天飞，js文件里面各种函数到处乱放。一开始用起来还没什么，后来加入了更多功能的时候，JS代码维护起来就疼不欲生了。因此托了个小伙伴帮忙使用模块化思想重构了一下JS代码。</p>
<p>上面说了，我们首先需要创建我们的模块，在这个项目里面，主模块叫home.js。</p>
<p>home.js中我们需要配置一下require.config.<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">require.config(&#123;</div><div class="line">    baseUrl: <span class="string">'/DomainJS/'</span>,</div><div class="line">    paths: &#123;</div><div class="line">        jquery: <span class="string">"lib/jquery-1.11.3.min"</span>,</div><div class="line">        <span class="string">"AMUI"</span>: <span class="string">"lib/amazeui.2.7.1.min"</span>,</div><div class="line">        <span class="string">"jquery.range"</span>: <span class="string">"lib/jquery.range"</span>,</div><div class="line">        <span class="string">"es5"</span>: <span class="string">"lib/es5"</span>,</div><div class="line">        <span class="string">"mapController"</span>: <span class="string">"mapController"</span>,</div><div class="line">        <span class="string">"addToolbar"</span>: <span class="string">"addToolbar"</span>,</div><div class="line">    &#125;,</div><div class="line">    shim: &#123;</div><div class="line">        <span class="string">"addToolbar"</span>: &#123;</div><div class="line">            deps: [<span class="string">"jquery"</span>]</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"jquery.range"</span>: &#123;</div><div class="line">            deps: [<span class="string">"jquery"</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在这里我主要配置了一下baseURL(所有模块的查找根路径)，paths(名称映射)，shim(<br>为那些没有使用define()来声明依赖关系、设置模块的”浏览器全局变量注入”型脚本做依赖和导出配置。)</p>
<p>关于require.config的详细内容可以看下下面这些文章：</p>
<ol>
<li><a href="https://segmentfault.com/a/1190000002401665" target="_blank" rel="external">RequireJS进阶:配置文件的学习</a> </li>
<li><a href="https://segmentfault.com/a/1190000002403806" target="_blank" rel="external">RequireJS进阶:模块的优化及配置的详解</a></li>
</ol>
<p>配置做完了，我们也可以开始真正写我们的逻辑代码了,我们使用require来加载我们需要的库。<br>代码如下：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">require(['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo'], </div><div class="line"></div><div class="line">function (<span class="name">doc</span>, $, AMUI, mapController, city, commuteGo) &#123;</div><div class="line">    city.initAllCityInfo()<span class="comment">;</span></div><div class="line">    mapController.init()<span class="comment">;</span></div><div class="line"></div><div class="line">    $(<span class="string">"input[name='locationType']"</span>).bind('click', </div><div class="line">    mapController.locationMethodOnChange)</div><div class="line"></div><div class="line">    $(<span class="string">"input[name='vehicle']"</span>).bind('click', commuteGo.go)</div><div class="line"></div><div class="line">    $('#Get58Data').bind('click', function(<span class="name">e</span>) &#123;</div><div class="line">        e.preventDefault()<span class="comment">;</span></div><div class="line">     </div><div class="line">        mapController.Get58DataClick()<span class="comment">;</span></div><div class="line">        e.stopPropagation()<span class="comment">;</span></div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line"></div><div class="line"> </div><div class="line">    $.ajax(&#123;</div><div class="line">        type: <span class="string">"post"</span>,</div><div class="line">        url: <span class="string">"../Commom/GetPVCount"</span>,</div><div class="line">        data: &#123; &#125;,</div><div class="line">        success: function (<span class="name">result</span>)</div><div class="line">        &#123;</div><div class="line">            if (<span class="name">result</span>.IsSuccess)&#123;</div><div class="line">                $(<span class="string">"#lblPVCount"</span>).text(<span class="name">result</span>.PVCount)<span class="comment">;</span></div><div class="line">            &#125;else &#123;</div><div class="line">                $(<span class="string">"#lblPVCount"</span>).text(<span class="number">0</span>)<span class="comment">;</span></div><div class="line">                console.log(<span class="name">result</span>.Error)<span class="comment">;</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line"></div><div class="line">    $('#search-offcanvas').offCanvas(&#123; effect: 'overlay' &#125;)<span class="comment">;</span></div><div class="line"></div><div class="line">    $(<span class="string">".amap-sug-result"</span>).css(<span class="string">"z-index"</span>, <span class="number">9999</span>)<span class="comment">;</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>忽略function里面的具体逻辑，加载如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'domready!'</span>, <span class="string">'jquery'</span>, <span class="string">'AMUI'</span>, <span class="string">'mapController'</span>, <span class="string">'city'</span>, <span class="string">'commuteGo'</span>], </div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">doc, $, AMUI, mapController, city, commuteGo</span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//todo</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>第一个参数为一个数组，表示所依赖的模块，此处为[‘domready!’, ‘jquery’, ‘AMUI’, ‘mapController’, ‘city’, ‘commuteGo’]；</p>
<p>第二个参数为回调函数，当前面指定的模块都全部加载成功之后，便调用此函数。加载的模块会以参数形式传入此函数，从而在回调函数内部就可以使用这些模块啦。</p>
<p>require()异步加载所需模块的时候，此时浏览器并不会失去响应；当前面的模块加载成功之后，执行回调函数才会运行我们的逻辑代码，因此解决了依赖性问题。</p>
<p>讲完了模块加载，我们下面讲一下模块编写。</p>
<h3 id="AMD模块编写"><a href="#AMD模块编写" class="headerlink" title="AMD模块编写"></a>AMD模块编写</h3><p>require.js加载的模块的采用的AMD规范。所以我们的模块必须按照AMD的规定来写。</p>
<p>关于AMD规范详情可以看这个文章：<a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="external">Javascript模块化编程（二）：AMD规范</a></p>
<p>模块有两个情况，不依赖其他模块和依赖其他模块。</p>
<h4 id="不依赖其他模块"><a href="#不依赖其他模块" class="headerlink" title="不依赖其他模块"></a>不依赖其他模块</h4><p>直接define定义，使用function回调。</p>
<p><a href="https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/helper.js" target="_blank" rel="external">58HouseSearch/DomainJS/helper.js</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//获取URL中的参数</span></div><div class="line">    <span class="keyword">var</span> getQueryString=  <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</div><div class="line">        <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</div><div class="line">        <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        getQueryString: getQueryString,</div><div class="line">    &#125;;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="依赖其他模块"><a href="#依赖其他模块" class="headerlink" title="依赖其他模块"></a>依赖其他模块</h4><p>define中如同require一样，用数组表明需要加载的模块，function回调。</p>
<p><a href="https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/marker.js" target="_blank" rel="external">58HouseSearch/DomainJS/marker.js</a><br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">define(['mapSignleton', 'city', 'transfer'], </div><div class="line">function(<span class="name">mapSignleton</span>, city, transfer) &#123;</div><div class="line">    var _map = mapSignleton.map<span class="comment">;</span></div><div class="line">    var _workMarker = null<span class="comment">;</span></div><div class="line">    var _markerArray = []<span class="comment">;</span></div><div class="line">    var load = function(<span class="name">x</span>, y, locationName) &#123;</div><div class="line">        _workMarker = new AMap.Marker(&#123;</div><div class="line">            map: _map,</div><div class="line">            title: locationName,</div><div class="line">            icon: 'http<span class="symbol">://webapi</span>.amap.com/theme/v1.<span class="number">3</span>/markers/n/mark_r.png',</div><div class="line">            position: [x, y]</div><div class="line">        &#125;)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var add = function(<span class="name">address</span>, rent, href, markBG) &#123;</div><div class="line">        new AMap.Geocoder(&#123;</div><div class="line">            city: city.name,</div><div class="line">            radius: <span class="number">1000</span></div><div class="line">        &#125;).getLocation(<span class="name">address</span>, function(<span class="name">status</span>, result) &#123;</div><div class="line"></div><div class="line">            if (<span class="name">status</span> === <span class="string">"complete"</span> <span class="symbol">&amp;&amp;</span> result.info === 'OK') &#123;</div><div class="line">                var geocode = result.geocodes[<span class="number">0</span>]<span class="comment">;</span></div><div class="line">                var rentMarker = new AMap.Marker(&#123;</div><div class="line">                    map: _map,</div><div class="line">                    title: address,</div><div class="line">                    icon: markBG ? 'IMG/Little/' +</div><div class="line">                    markBG : 'http<span class="symbol">://webapi</span>.amap.com/theme/v1.<span class="number">3</span>/markers/n/mark_b.png',</div><div class="line">                    position: [geocode.location.getLng(), geocode.location.getLat()]</div><div class="line">                &#125;)<span class="comment">;</span></div><div class="line">                _markerArray.push(<span class="name">rentMarker</span>)<span class="comment">;</span></div><div class="line"></div><div class="line">                rentMarker.content = <span class="string">"&lt;div&gt;&lt;a target = '_blank' href='"</span> </div><div class="line">                + href + <span class="string">"'&gt;房源："</span> + address + <span class="string">"  租金："</span> + rent + <span class="string">"&lt;/a&gt;&lt;div&gt;"</span></div><div class="line">                rentMarker.on('click', function(<span class="name">e</span>) &#123;</div><div class="line">                    transfer.add(<span class="name">e</span>, address)<span class="comment">;</span></div><div class="line">                &#125;)<span class="comment">;</span></div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;<span class="comment">;</span></div><div class="line"></div><div class="line">    var clearArray = function() &#123;</div><div class="line">        if (<span class="name">_markerArray</span> <span class="symbol">&amp;&amp;</span> _markerArray.length &gt; <span class="number">0</span>) </div><div class="line">        _map.remove(<span class="name">_markerArray</span>)<span class="comment">;</span></div><div class="line">        _markerArray = []<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var clear = function() &#123;</div><div class="line">        if (<span class="name">_workMarker</span>) &#123;</div><div class="line">            _map.remove(<span class="name">_workMarker</span>)<span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return &#123;</div><div class="line">        load: load,</div><div class="line">        add: add,</div><div class="line">        clearArray: clearArray,</div><div class="line">        clear: clear</div><div class="line">    &#125;<span class="comment">;</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>这样的话，一个供require调用的模块也就写好了。</p>
<p>最后感谢小伙伴<a href="https://www.zhihu.com/people/piratf" target="_blank" rel="external">Larry Sean</a> 帮忙重构代码。</p>
<p>全文完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;最早接触javascript的时候，javascript代码直接扔在script标签里面就完事了。&lt;/p&gt;
&lt;p&gt;反正代码不
    
    </summary>
    
      <category term="javascript" scheme="http://codelover.link/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://codelover.link/tags/javascript/"/>
    
      <category term="requirejs" scheme="http://codelover.link/tags/requirejs/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2 0x80070003</title>
    <link href="http://codelover.link/2016/10/15/install_Preview2_on_fresh_VS2015_Update3_Installation/"/>
    <id>http://codelover.link/2016/10/15/install_Preview2_on_fresh_VS2015_Update3_Installation/</id>
    <published>2016-10-15T05:53:38.246Z</published>
    <updated>2016-10-15T07:31:54.363Z</updated>
    
    <content type="html"><![CDATA[<p>最近安装Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2实在有点曲折，忍不住写个文章来讲这货的坑爹之旅了。</p>
<p>一般我们在<a href="https://www.microsoft.com/net/download" target="_blank" rel="external">.NET Downloads</a> 下载回来的Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2是一个简易安装包。</p>
<p>它在安装过程中会不断去网络请求需要的msi文件，美名曰：在线安装。</p>
<p>然而在我国的国情以及我国网络运营商的衬托下，在线安装这种东西实在不可恭维。</p>
<p>本来网络稳定，在线安装 这种鬼也还算能用，不过最近微软爸爸不知道为嘛了，.net core相关安装包的下载地址全线失效。<br>如<a href="https://download.microsoft.com/download/0/A/3/0A372822-205D-4A86-BFA7-084D2CBE9EDF/DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe" target="_blank" rel="external">DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe</a>，直接出502 Bad Gateway。</p>
<p>这个还能用迅雷或者命令行下载回来，但是DotNetCore.1.0.1-SDK.1.0.0.Preview2这货安装过程中需要的一下msi安装包，就死活下不回来了。</p>
<h4 id="安装过程报错：0x80070003-系统找不到需要的文件。"><a href="#安装过程报错：0x80070003-系统找不到需要的文件。" class="headerlink" title="安装过程报错：0x80070003 系统找不到需要的文件。"></a>安装过程报错：0x80070003 系统找不到需要的文件。</h4><p>此处已确认是微软爸爸的bug了。<a href="https://github.com/aspnet/Tooling/issues/655" target="_blank" rel="external">issue在这里</a></p>
<p>我们去看安装失败的log，能看到类似下面的log：</p>
<p>Error 0x80072efd: Failed attempt to download URL: ‘<a href="https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi" target="_blank" rel="external">https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi</a>‘ to: ‘C:\Users\cneuss\AppData\Local\Temp{C307771D-8D9A-45B5-B514-B6CA69C0C6E2}\ANCM_IISExpress_x64’</p>
<p>很明显这个操作从<a href="https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi" target="_blank" rel="external">https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi</a>上面下载ancm_iis_express_x64_en_rc2_39.msi文件。<br>然而我们点击进去，看到这个同样的问题：502 Bad Gateway。</p>
<p>安装到这里，已经GG了。</p>
<p>不过既然知道是因为下载文件的问题了，那么解决办法也应运而生了。</p>
<p>我们完全手动下载文件（用迅雷或者别的下载工具），发布在本地，改hosts地址让下载请求直接从本地下载文件。</p>
<p>这个方案听起来是没有任何的问题的，我也成功使用迅雷把无法下载的文件下载到本地了。然而在改host地址这里卡住了。</p>
<p>不知道为嘛，无论我把<a href="download.microsoft.com">download.microsoft.com</a>指向怎么改，也无法把请求重定向到本地。</p>
<p>后来认真看了下安装log，发现所以的下载操作都是把文件下载到 C:\Users\cneuss\AppData\Local\Temp 目录（具体目录看log文件内容）下的临时路径，报错是系统找不到需要的文件。</p>
<p>那么，我们手动把需要的文件放到对应的位置，问题也就解决了。</p>
<p>所以，为了清晰找到临时路径，安装之前先把“C:\Users\cneuss\AppData\Local\Temp”的文件清空，然后点击安装包。</p>
<p>很快可以在temp路径下看到冒出来的{xxxxxxxxxxxxx}文件夹，然后迅速把我们通过迅雷下载回来的文件仍到这个目录底下。</p>
<p>迅速操作的原因是，在线安装包正在下载所需要的文件，如：ancm_iis_express_x64_en_rc2_39.msi，我们要在下载超时之前把文件应该在的位置，这样的话即使下载没拿到文件，安装程序还是可以拿我们的文件去执行安装。</p>
<p>别的就是不断尝试，看缺少那个msi手动下哪个msi的事情了。</p>
<h4 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h4><p>最后，根据log文件，还发现了一个更简单的方法：</p>
<p>在DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe的同级目录下新建packages文件夹，把上面无法在线下载到的msi仍进去，然后就一路绿灯了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近安装Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2实在有点曲折，忍不住写个文章来讲这货的坑爹之旅了。&lt;/p&gt;
&lt;p&gt;一般我们在&lt;a href=&quot;https://www.microsoft.com/net/downl
    
    </summary>
    
      <category term=".net core" scheme="http://codelover.link/categories/net-core/"/>
    
    
  </entry>
  
  <entry>
    <title>VS快捷键（转载）</title>
    <link href="http://codelover.link/2016/10/14/visualstudio_shortcut_key/"/>
    <id>http://codelover.link/2016/10/14/visualstudio_shortcut_key/</id>
    <published>2016-10-13T16:00:00.000Z</published>
    <updated>2016-10-15T07:23:43.214Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.cnblogs.com/xiaofeixiang/p/3785167.html" target="_blank" rel="external">http://www.cnblogs.com/xiaofeixiang/p/3785167.html</a></p>
<p>ctrl+s         保存（这个确实很简单，要说常用，这玩意绝对排名第一）</p>
<p>ctrl+Shift+S   保存所有VS中打开的所有文件</p>
<p>ctrl+O         打开新文件</p>
<p>ctrl+Shift+O   打开项目</p>
<p>ctrl+Shift+A   当前项目中添加新建项</p>
<p>ctrl+F4        关闭当前打开页</p>
<p>ctrl+F6        跳到下一个窗口</p>
<p>ctrl+Shift+F6  跳到前一个打开的窗口</p>
<p>F12            转到函数定义实现处，或者转到变量定义处（一堆代码中使用这个键确实逻辑会更清晰一点）</p>
<p>ctrl+-         这个相对来说跟F12是配套使用的，F12到函数定义，然后返回原代码中继续查看</p>
<p>shift+ctrl+-   相对于上一个步骤，这个可以再次转到函数定义的地方</p>
<p>ctrl+tab       页面切换，打开页面过多的话，切换用的还是比较多的</p>
<p>ctrl+F         搜索，查找，功能简单粗暴有的时候比很高效</p>
<p>ctrl+F3        在选中区域搜索</p>
<p>ctrl+K，ctrl+D 整个文档格式化</p>
<p>ctrl+K,ctrl+F  格式化选中部分代码</p>
<p>ctrl+K，ctrl+C  代码注释</p>
<p>ctrl+K，ctrl+U  取消代码注释</p>
<p>ctrl+L          删除，删除当前行或者删除选中行</p>
<p>Shift+Alt+Enter 当前代码区域全屏，再按一次取消全屏</p>
<p>ctrl+M，ctrl+M  写代码都喜欢折叠，折叠之后还是还要打开的，可以试试这个快捷键</p>
<p>ctrl+space      代码补全</p>
<p>ctrl+Enter      假如现在当前行上面添加代码光标跳到当前行的上一行</p>
<p>ctrl+Shift+Enter假如现在当前行下面添加代码光标跳到当前行的下一行</p>
<p>Shift+F12       查找函数或者变量的所有引用</p>
<p>ctrl+g          查找行，跳转到你想要跳转的行数</p>
<p>ctrl+Shift+↑    向上查找引用</p>
<p>ctrl+Shift+↓    向下查找引用</p>
<p>Shift+Alt+↑    向上画一条直线，通常如果拷贝代码的时候有行号可以这样去除</p>
<p>Shift+Alt+↓    向下画一条直线，同上</p>
<p>Shift+↑         向上选中代码区域</p>
<p>Shift+↓         向下选中代码区域</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.cnblogs.com/xiaofeixiang/p/3785167.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/xiaofeixiang/p/3785
    
    </summary>
    
      <category term="memorandum" scheme="http://codelover.link/categories/memorandum/"/>
    
    
      <category term="Visual Studio" scheme="http://codelover.link/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>58HouseSearch项目迁移到asp.net core</title>
    <link href="http://codelover.link/2016/10/04/58CityHouseSearch_move_to_aspnetcore/"/>
    <id>http://codelover.link/2016/10/04/58CityHouseSearch_move_to_aspnetcore/</id>
    <published>2016-10-03T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://github.com/liguobao/58HouseSearch" target="_blank" rel="external">58HouseSearch</a>这个项目原本是基于ASP.NET MVC 4写的，开发环境是Windows+VS2015，发布平台是linux+mono+jexus，这样看来整个项目基本已经满足跨平台的需求。</p>
<p>这样一来，本来我是没什么动力去做迁移的，好好的东西闲着没事干才迁移呢。</p>
<p>不过，这不国庆了么？穷人不是在家穷游天下么？所以…真的有点闲着没事干了。</p>
<h3 id="迁移可行性探讨"><a href="#迁移可行性探讨" class="headerlink" title="迁移可行性探讨"></a>迁移可行性探讨</h3><p>项目迁移前，我们还是先来讨论一下迁移可行性。为嘛要进行可行性探讨呢？原因是.NET CORE是一个跨平台的框架，和上一代的.NET存在不兼容。</p>
<p>个人总结一下，迁移的主要的问题在于：代码不兼容、类库不兼容、严重依赖Windows API或者COM组件等。</p>
<h4 id="代码不兼容"><a href="#代码不兼容" class="headerlink" title="代码不兼容"></a>代码不兼容</h4><p>代码不兼容其实不算麻烦。毕竟代码是活的，你我也是活的，不就是一个改字罢了。花点时间慢慢改，总是能搞掂的。</p>
<h4 id="类库不兼容"><a href="#类库不兼容" class="headerlink" title="类库不兼容"></a>类库不兼容</h4><p>要不就弃用，要不就找替代品。</p>
<h4 id="严重依赖Windows-API或者COM组件"><a href="#严重依赖Windows-API或者COM组件" class="headerlink" title="严重依赖Windows API或者COM组件"></a>严重依赖Windows API或者COM组件</h4><p>额？找替代品，找不到可用替代品的话。放弃吧，这个项目别考虑迁移了。</p>
<p>这个故事告诉我们，做跨平台项目的时候，少点用系统API或者组建。</p>
<p>回到58HouseSearch项目上面。</p>
<p>这个项目的代码基本都是我写的，所以重写代码没什么问题。<br>依赖的类库有下面几个:</p>
<ul>
<li><p><a href="https://github.com/FlorianRappl/AngleSharp" target="_blank" rel="external">AngleSharp</a></p>
</li>
<li><p><a href="http://www.newtonsoft.com/json" target="_blank" rel="external">Newtonsoft.Json</a></p>
</li>
<li><p><a href="http://logging.apache.org/log4net/" target="_blank" rel="external">log4net</a></p>
</li>
</ul>
<p>AngleSharp是用来解析HTML的类库，用linq的方式来操作HTML，用起来实在爽快。</p>
<p>如果这货在.net core上不能跑，我应该立马放弃了。<br>不过，这个实在给力…</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/1a950803-3d38-4b16-9761-6c9cd806b0b9" alt="AngleSharp支持平台"></p>
<p>Newtonsoft.Json</p>
<p>在这个项目里面主要是用来记录PV数据的，非核心功能，可有可无。不过看了下nuget上的介绍，也是支持.net core的。</p>
<p>剩下log4net…嗯，并不支持log4net。不过这个就更加是非核心内容了，直接丢了。<br>PS:考虑后期加入Nlog替代log4net。</p>
<p>至于依赖Windows API之类的，在这个项目里面基本没有，所以略过…</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li><a href="https://www.visualstudio.com/downloads/" target="_blank" rel="external">Visual Studio Community 2015 with Update 3 – Free</a></li>
<li><a href="https://www.microsoft.com/net/download" target="_blank" rel="external">.NET Core SDK</a></li>
<li><a href="https://www.microsoft.com/net/download" target="_blank" rel="external">.NET Core</a></li>
<li><a href="https://go.microsoft.com/fwlink/?LinkId=827546" target="_blank" rel="external">.NET Core 1.0.1 - VS 2015 Tooling Preview 2</a></li>
</ul>
<p>友情提示：</p>
<ol>
<li>Visual Studio Community 2015 with Update 3 下载镜像来安装。</li>
</ol>
<p>错误操作如下：<br><img src="http://7xread.com1.z0.glb.clouddn.com/1e723e08-b3d5-4dab-b4a6-1de70799c4c8" alt="错误操作"></p>
<p>正确打开方式：</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/706771d8-d3f2-4122-a61d-5e961887121a" alt="正确的打开方式-1"></p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/455ec5cc-b429-4563-a4fb-3a0c18608969" alt="正确的打开方式-2"></p>
<ol>
<li><p>安装.NET Core SDK和.NET Core之后再安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2</p>
</li>
<li><p>安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2 这货的可能会报错0x80072f8a未指定的错误</p>
</li>
</ol>
<p>解决方案见下图：</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/47c517d1-4b48-4088-be4a-a0768413e768" alt="图片描述"></p>
<p>详细见链接：<a href="http://www.cnblogs.com/JiaoWoWeiZai/p/5892255.html" target="_blank" rel="external">安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误</a></p>
<p>上面都弄好之后，理论上在VS2O15-新建项目里面可以看到ASP.NET CORE的模板了。如下图：<br><img src="http://7xread.com1.z0.glb.clouddn.com/3364e7c9-a41e-47f2-8d08-60345e4efa35" alt="ASP.NET CORE的模板"></p>
<h3 id="项目迁移"><a href="#项目迁移" class="headerlink" title="项目迁移"></a>项目迁移</h3><h4 id="新建空白ASP-NET-CORE项目"><a href="#新建空白ASP-NET-CORE项目" class="headerlink" title="新建空白ASP.NET CORE项目"></a>新建空白ASP.NET CORE项目</h4><p>新建好了之后如下图：</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/e047d81d-56f1-4e51-9d72-7989e1fc6225" alt="空白ASP.NET CORE项目"></p>
<h4 id="Nuget获取引用"><a href="#Nuget获取引用" class="headerlink" title="Nuget获取引用"></a>Nuget获取引用</h4><p><a href="https://www.nuget.org/packages/AngleSharp/" target="_blank" rel="external">https://www.nuget.org/packages/AngleSharp/</a></p>
<p><a href="https://www.nuget.org/packages/Newtonsoft.Json" target="_blank" rel="external">https://www.nuget.org/packages/Newtonsoft.Json</a></p>
<h4 id="添加Controllers文件夹"><a href="#添加Controllers文件夹" class="headerlink" title="添加Controllers文件夹"></a>添加Controllers文件夹</h4><p>然后把之前项目的Controllers拷贝过来，改掉命名空间，去掉无用代码，添加相应引用。</p>
<h4 id="添加Views文件夹"><a href="#添加Views文件夹" class="headerlink" title="添加Views文件夹"></a>添加Views文件夹</h4><p>本项目直接把之前项目的Views拷贝过来是完全没有问题的。</p>
<h4 id="静态文件处理"><a href="#静态文件处理" class="headerlink" title="静态文件处理"></a>静态文件处理</h4><p>asp.net core MVC中的文件结构和asp.net mvc的文件结构略有不同。</p>
<p>asp.net core MVC在view中“IMG/Little/PaleGreen.png”对应的文件对应于“项目路径/webroot/IMG/Little/PaleGreen.png”；</p>
<p>而asp.net mvc中，对应路径为“项目/IMG/Little/PaleGreen.png”。</p>
<p>因而，我们的所有静态文件都应该放到：webroot文件夹下。</p>
<p>上面的都做完了之后，项目结构如下：</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/2fee156b-2505-4953-bfe9-1d2521f13565" alt="项目结构"></p>
<p>接下来就是改代码了。</p>
<h3 id="代码迁移"><a href="#代码迁移" class="headerlink" title="代码迁移"></a>代码迁移</h3><h4 id="Startup-cs添加MVC"><a href="#Startup-cs添加MVC" class="headerlink" title="Startup.cs添加MVC"></a>Startup.cs添加MVC</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// This method gets called by the runtime. Use this method to add services to the container.</span></div><div class="line">    <span class="comment">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940</span></div><div class="line">    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">ConfigureServices</span>(IServiceCollection services)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//添加MVC框架</span></div><div class="line">        services<span class="selector-class">.AddMvc</span>();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></div><div class="line">    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">Configure</span>(IApplicationBuilder app, IHostingEnvironment env,</div><div class="line">    ILoggerFactory loggerFactory)</div><div class="line">    &#123;</div><div class="line">        loggerFactory<span class="selector-class">.AddConsole</span>();</div><div class="line"></div><div class="line">        <span class="selector-tag">if</span> (env.IsDevelopment())</div><div class="line">        &#123;</div><div class="line">            app<span class="selector-class">.UseDeveloperExceptionPage</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//启用静态文件中间件</span></div><div class="line">        app<span class="selector-class">.UseStaticFiles</span>();</div><div class="line">        <span class="comment">//启动MVC路由</span></div><div class="line">        app<span class="selector-class">.UseMvcWithDefaultRoute</span>();</div><div class="line">        <span class="comment">//设置默认页面</span></div><div class="line">        <span class="selector-tag">app</span><span class="selector-class">.UseMvc</span>(routes =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="selector-tag">routes</span><span class="selector-class">.MapRoute</span>(</div><div class="line">                <span class="attribute">name</span>: <span class="string">"default"</span>,</div><div class="line">                <span class="attribute">template</span>: <span class="string">"&#123;controller=House&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>); </div><div class="line">        &#125;);</div><div class="line"></div><div class="line">      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="改写GetHTMLByURL方法"><a href="#改写GetHTMLByURL方法" class="headerlink" title="改写GetHTMLByURL方法"></a>改写GetHTMLByURL方法</h4><p>之前的方法：</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/d005a100-e3e6-423b-b34c-3eae11b2ab63" alt="old GetHTMLByURL"></p>
<p>.net core重写了HttpWebRequest，变成了WebRequest,所以上面的代码废了。</p>
<p>重写如下：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public static <span class="keyword">string</span> GetHTMLByURL(<span class="keyword">string</span> Url, <span class="keyword">string</span> <span class="built_in">type</span> = <span class="string">"UTF-8"</span>)</div><div class="line">&#123;</div><div class="line">    try</div><div class="line">    &#123;</div><div class="line">        Url = Url.ToLower();</div><div class="line"></div><div class="line">        <span class="keyword">System</span>.Net.WebRequest wReq = <span class="keyword">System</span>.Net.WebRequest.<span class="keyword">Create</span>(Url);</div><div class="line">        <span class="comment">// Get the response instance.</span></div><div class="line">        <span class="keyword">System</span>.Net.WebResponse wResp = wReq.GetResponseAsync().Result;</div><div class="line">        <span class="keyword">System</span>.IO.Stream respStream = wResp.GetResponseStream();</div><div class="line">        using (<span class="keyword">System</span>.IO.StreamReader reader = <span class="keyword">new</span> <span class="keyword">System</span>.IO.</div><div class="line">        StreamReader(respStream, Encoding.GetEncoding(<span class="built_in">type</span>)))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> reader.ReadToEnd();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    catch (<span class="keyword">System</span>.Exception ex)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.Empty;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="改写Controller代码"><a href="#改写Controller代码" class="headerlink" title="改写Controller代码"></a>改写Controller代码</h4><p>嗯，换了命名空间，别的一句都没改直接拉过来了…略过。</p>
<h3 id="发布到ubuntu"><a href="#发布到ubuntu" class="headerlink" title="发布到ubuntu"></a>发布到ubuntu</h3><p><a href="https://www.microsoft.com/net/core#ubuntu" target="_blank" rel="external">Install for Ubuntu 14.04, 16.04 &amp; Linux Mint 17</a></p>
<p>第一步<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Ubuntu 14.04 / Linux Mint 17</span></div><div class="line">sudo <span class="keyword">sh</span> -c 'echo <span class="string">"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main"</span> &gt; /etc/apt/sources.<span class="keyword">list</span>.<span class="keyword">d</span>/dotnetdev.<span class="keyword">list</span>'</div><div class="line">sudo apt-key adv --keyserver apt-mo.trafficmanager.<span class="keyword">net</span> --recv-keys 417A0893</div><div class="line">sudo apt-get <span class="keyword">update</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Ubuntu 16.04</span></div><div class="line">sudo <span class="keyword">sh</span> -c 'echo <span class="string">"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main"</span> &gt; /etc/apt/sources.<span class="keyword">list</span>.<span class="keyword">d</span>/dotnetdev.<span class="keyword">list</span>'</div><div class="line">sudo apt-key adv --keyserver apt-mo.trafficmanager.<span class="keyword">net</span> --recv-keys 417A0893</div><div class="line">sudo apt-get <span class="keyword">update</span></div></pre></td></tr></table></figure></p>
<p>第二步<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install dotnet-dev<span class="number">-1.0</span><span class="number">.0</span>-preview2<span class="number">-003131</span></div></pre></td></tr></table></figure></p>
<p>安装好了之后，输入 dotnet -v 应该能看到版本信息，如下图：</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/6ebca12e-2be9-487e-b230-d22562a5aabe" alt="dotnet -v "></p>
<p>这样的下，一句完成了ubuntu 运行asp.net core的环境搭建了。</p>
<h3 id="project-json里面隐藏的坑"><a href="#project-json里面隐藏的坑" class="headerlink" title="project.json里面隐藏的坑"></a>project.json里面隐藏的坑</h3><h4 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h4><p>NET Core 1.0.1 - VS 2015 Tooling Preview 2模板的asp.net core 版本和ubuntu 的asp.net core 版本不一致。</p>
<p>根据微软爸给的教程，我们在ubuntu上安装的.NET Core 1.0.0，见上图。</p>
<p>然而我们创建项目的模板是.NET Core 1.0.1，见下图:</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/a3192bdf-f548-4fad-868a-4865632acd29" alt=".NET Core 1.0.1"></p>
<p>怎么办？要不升级ubuntu的asp.net core，要不降级。</p>
<p>由于没找到.NET Core 1.0.1 ubuntu的安装包，所以我选择了降级到.NET Core 1.0.0.</p>
<p>其中需要把Microsoft.NETCore.App version 、Microsoft.AspNetCore.Server.Kestrel、Microsoft.AspNetCore.Mvc 这三个节点都改成“1.0.0”。如下：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">  <span class="string">"Microsoft.NETCore.App"</span>: &#123;</div><div class="line">    <span class="string">"version"</span>: <span class="string">"1.0.1"</span>,</div><div class="line">    <span class="string">"type"</span>: <span class="string">"platform"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"Microsoft.AspNetCore.Diagnostics"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"Microsoft.AspNetCore.Server.IISIntegration"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"Microsoft.AspNetCore.Server.Kestrel"</span>: <span class="string">"1.0.1"</span>,</div><div class="line">  <span class="string">"Microsoft.Extensions.Logging.Console"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"Microsoft.AspNetCore.Mvc"</span>: <span class="string">"1.0.1"</span>,</div><div class="line">  <span class="string">"Microsoft.AspNetCore.StaticFiles"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"Newtonsoft.Json"</span>: <span class="string">"9.0.1"</span>,</div><div class="line">  <span class="string">"AngleSharp"</span>: <span class="string">"0.9.8.1"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="publishOptions"><a href="#publishOptions" class="headerlink" title="publishOptions"></a>publishOptions</h4><p>发布输出包括Views文件夹<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"publishOptions"</span>: &#123;</div><div class="line">  <span class="string">"include"</span>: [</div><div class="line">    <span class="string">"wwwroot"</span>,</div><div class="line">    <span class="string">"web.config"</span>,</div><div class="line">    <span class="string">"Views"</span></div><div class="line">  ]</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<h4 id="runtimes"><a href="#runtimes" class="headerlink" title="runtimes"></a>runtimes</h4><p>runtimes 配置为模板运行平台。<br>详细见链接：<a href="https://docs.nuget.org/ndocs/schema/project.json" target="_blank" rel="external">https://docs.nuget.org/ndocs/schema/project.json</a></p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"runtimes"</span>: &#123; <span class="string">"ubuntu.14.04-x64"</span>: &#123;&#125; &#125;</div></pre></td></tr></table></figure>
<p>上面都弄好之后，跑一下看,如下图：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dotnet <span class="keyword">restore</span></div><div class="line"></div><div class="line"><span class="keyword">dotnet</span> run</div></pre></td></tr></table></figure>
<p>来个请求看看：</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/b1191226-c33b-45c7-98cc-f62bb3ea73b4" alt="请求log"></p>
<h3 id="jexus转发-反向代理"><a href="#jexus转发-反向代理" class="headerlink" title="jexus转发/反向代理"></a>jexus转发/反向代理</h3><p><a href="http://www.cnblogs.com/gaobing/p/5663012.html" target="_blank" rel="external">ASP.NET Core “完整发布,自带运行时” 到jexus</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/liguobao/58HouseSearch&quot; target=&quot;_blank&quot; re
    
    </summary>
    
      <category term="asp.net core" scheme="http://codelover.link/categories/asp-net-core/"/>
    
    
      <category term="58City" scheme="http://codelover.link/tags/58City/"/>
    
      <category term="asp.net core" scheme="http://codelover.link/tags/asp-net-core/"/>
    
  </entry>
  
  <entry>
    <title>58同城高德搜房项目JS相关知识</title>
    <link href="http://codelover.link/2016/08/13/58City-House-Crawler-JS/"/>
    <id>http://codelover.link/2016/08/13/58City-House-Crawler-JS/</id>
    <published>2016-08-12T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.470Z</updated>
    
    <content type="html"><![CDATA[<p>在线地址：<a href="http://codelover.link:8080/">58同城品牌公寓高德搜房</a></p>
<p>Github地址：<a href="https://github.com/liguobao/58HouseSearch" target="_blank" rel="external">https://github.com/liguobao/58HouseSearch</a></p>
<p>知乎专栏(点赞用的)：<a href="https://zhuanlan.zhihu.com/p/21960329" target="_blank" rel="external">高德API+Python解决租房问题(.NET版)</a></p>
<p>经过了一个星期的修补补，以及小伙伴奉献的代码，整个项目基本处于基本稳定运行的状态。</p>
<p>同时加入了一下新功能：</p>
<ol>
<li>IP定位：调用高德地图IP定位功能实现</li>
<li>移动地图中心定位：调用高德地图移动地图定位实现</li>
<li>定位城市名转58同城城市名以获得准确58同城城市域名：抓取58同城城市分类信息</li>
<li>优化数据源、去除广告数据：小伙伴奉献代码</li>
</ol>
<p>今天主要简单讲解一下其中使用的一些高德地图API接口。</p>
<p>高德地图JavaScript API 主体为map对象，基本所有的操作都是通过map对象来实现的。<br>map对象实例化是通过 Amap类来做的。如以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">map = <span class="keyword">new</span> AMap.Map(<span class="string">"container"</span>, &#123;</div><div class="line">        resizeEnable: <span class="literal">true</span>,</div><div class="line">        zoomEnable: <span class="literal">true</span>,</div><div class="line">        center: [<span class="number">121.297428</span>, <span class="number">31.1345</span>],<span class="comment">//经纬度，此处为上海</span></div><div class="line">        zoom: <span class="number">11</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="IP定位"><a href="#IP定位" class="headerlink" title="IP定位"></a>IP定位</h4><p>调用Map.CitySearch()获得当前IP所在城市，直接将地图显示成当前城市。代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCityInfo</span>(<span class="params">map</span>) </span>&#123;</div><div class="line">    <span class="comment">//实例化城市查询类</span></div><div class="line">    <span class="keyword">var</span> citysearch = <span class="keyword">new</span> AMap.CitySearch();</div><div class="line">    <span class="comment">//自动获取用户IP，返回当前城市</span></div><div class="line">    citysearch.getLocalCity(<span class="function"><span class="keyword">function</span> (<span class="params">status, result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (status === <span class="string">'complete'</span> &amp;&amp; result.info === <span class="string">'OK'</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (result &amp;&amp; result.city &amp;&amp; result.bounds) &#123;</div><div class="line">                <span class="keyword">var</span> cityinfo = result.city;<span class="comment">//获得XX市</span></div><div class="line">                <span class="keyword">var</span> citybounds = result.bounds;<span class="comment">//用于设置地图显示位置的实例</span></div><div class="line">                cityName = cityinfo.substring(<span class="number">0</span>, cityinfo.length - <span class="number">1</span>);<span class="comment">//去掉市这个字</span></div><div class="line">                ConvertCityCNNameToShortCut();<span class="comment">//城市名转换成58同城城市域名字母，如上海-&gt;sh,苏州-&gt;su,</span></div><div class="line">                                              <span class="comment">//下面会有实现代码</span></div><div class="line"></div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">'IPLocation'</span>).innerHTML = <span class="string">'您当前所在城市：'</span> + cityName;</div><div class="line">                <span class="comment">//地图显示当前城市</span></div><div class="line">                map.setBounds(citybounds);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'IPLocation'</span>).innerHTML = result.info;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="移动地图自动中心定位"><a href="#移动地图自动中心定位" class="headerlink" title="移动地图自动中心定位"></a>移动地图自动中心定位</h4><p>之前有一版是让用户输入城市名，然后直接定位到输入的城市的。<br>这个功能卡在了设置地图显示位置上，如果是使用高德地图提供的搜索控件的话，又存在输入结果之后搜索结果可能是多个的问题。而且这点我只是要取到用户想要定位的城市而已，感觉没必要做得太复杂。<br>昨晚在看高德地图API的时候发现，有一个移动地图获得地图中心所在位置的样例，马上眼前一亮了。这个功能比我想要的还要好…果断上。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MapMoveToLocationCity</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    map.on(<span class="string">'moveend'</span>, getCity);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getCity</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        map.getCity(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (data[<span class="string">'province'</span>] &amp;&amp; <span class="keyword">typeof</span> data[<span class="string">'province'</span>] === <span class="string">'string'</span>) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> cityinfo = (data[<span class="string">'city'</span>] || data[<span class="string">'province'</span>]);</div><div class="line">                cityName = cityinfo.substring(<span class="number">0</span>, cityinfo.length - <span class="number">1</span>);</div><div class="line">                ConvertCityCNNameToShortCut();<span class="comment">//城市名转58同城地区域名</span></div><div class="line"></div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">'IPLocation'</span>).innerHTML = <span class="string">'地图中心所在城市：'</span> + cityName;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整个代码的意思是，给map绑定一下移动时间，移动完了之后，调用getCity的方法获取当前地图中心所在城市信息。</p>
<p>这个时候要注意，城市名可能在city对象里面，也可能在province里面。</p>
<p>原因很简单：普通城市等级就是城市，我国还存在一个和省份一个等级的城市：直辖市。因此直辖市的城市名是在province里面的。</p>
<h4 id="城市名匹配58同城地区域名"><a href="#城市名匹配58同城地区域名" class="headerlink" title="城市名匹配58同城地区域名"></a>城市名匹配58同城地区域名</h4><p>这个是上个版本(两三天前)的一个bug引出来的新功能。</p>
<p>上个版本是让用户输入城市名，然后提取城市名的中文拼音首字母作为58同城地区域名。如上海 =sh，广州=gz，北京=bj，成都=cd。</p>
<p>这个功能使用的是网上别人写的一个JS库，通过汉字匹配实现的。转换出来的数据没什么问题，不过我国汉字实在奥妙。</p>
<p>广州=gz，赣州=gz；<br>遂宁=sn；绥宁=sn；<br>惠州=hz，杭州=hz。</p>
<p>这样一来，上面这个做法就没法玩了。</p>
<p>想了下怎么解决这个问题，灵机一动。反正是在爬58的数据，这个城市名和城市域名数据58同城肯定有啊，然后找到了这个。<br><a href="http://www.58.com/changecity.aspx?PGTID=0d100000-0007-a77b-4c4b-a28f725b8f5a&amp;ClickID=1" target="_blank" rel="external">58同城城市分类导航</a></p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/c01c293a-d5cc-4f58-80dc-13aa05d47b01" alt=""></p>
<p>很明显，我要的所有城市名和城市域名都是里面了。</p>
<p>晚上和衣衣说了下，衣衣一大早就把处理好的json数据给我了。</p>
<p>于是来了下面一段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//加载json文件</span></div><div class="line">$.getJSON(<span class="string">"DomainJS/city.json"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span></div><div class="line">&#123;</div><div class="line">      allCityInfo = data;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ConvertCityCNNameToShortCut</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> filterarray = $.grep(allCityInfo, <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> obj.cityName == cityName;</div><div class="line">    &#125;);<span class="comment">//找到当前城市名对应的json对象</span></div><div class="line">    <span class="comment">//获取json对象的地区域名</span></div><div class="line">    cityNameCNPY = filterarray <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? </div><div class="line">    filterarray[<span class="number">0</span>].shortCut : filterarray != <span class="literal">null</span> ? filterarray.shortCut : <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="高德地图自动补全功能"><a href="#高德地图自动补全功能" class="headerlink" title="高德地图自动补全功能"></a>高德地图自动补全功能</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control-input"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"work-location"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width:60%"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(&#123;</div><div class="line">       input: <span class="string">"work-location"</span></div><div class="line">   &#125;);</div><div class="line"></div><div class="line">   AMap.event.addListener(auto, <span class="string">"select"</span>, workLocationSelected);</div></pre></td></tr></table></figure>
<p>看方法前面也知道，其实这就是把ID为work-location的input初始化为地图插件，然后给Amap增加了一个监听事件。<br>当其中选中某一个数据的时候，触发workLocationSelected函数。效果如下：</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/fe425992-e7c4-4cae-800e-319eff3b17e8" alt=""></p>
<p>在这里locationSelected是定位到所选位置，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">workLocationSelected</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    workAddress = e.poi.name;</div><div class="line">    loadWorkLocation();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadWorkLocation</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    delWorkLocation();</div><div class="line">    <span class="keyword">var</span> geocoder = <span class="keyword">new</span> AMap.Geocoder(&#123;</div><div class="line">        city: cityName,</div><div class="line">        radius: <span class="number">1000</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    geocoder.getLocation(workAddress, <span class="function"><span class="keyword">function</span> (<span class="params">status, result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (status === <span class="string">"complete"</span> &amp;&amp; result.info === <span class="string">'OK'</span>) &#123;</div><div class="line">            <span class="keyword">var</span> geocode = result.geocodes[<span class="number">0</span>];</div><div class="line">            x = geocode.location.getLng();</div><div class="line">            y = geocode.location.getLat();</div><div class="line">            loadWorkMarker(x, y);</div><div class="line">            loadWorkRange(x, y, <span class="number">60</span>, <span class="string">"#3f67a5"</span>, vehicle);</div><div class="line">            map.setZoomAndCenter(<span class="number">12</span>, [x, y]);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至于导航功能代码我没怎么动，没去研究就不献丑了…</p>
<p>最后来个效果图。</p>
<h4 id="北京"><a href="#北京" class="headerlink" title="北京"></a>北京</h4><p><img src="http://7xread.com1.z0.glb.clouddn.com/e7900aba-5a56-417c-9dd9-63527583e84b" alt=""></p>
<h4 id="成都"><a href="#成都" class="headerlink" title="成都"></a>成都</h4><p><img src="http://7xread.com1.z0.glb.clouddn.com/c9947d97-1b76-42bf-82b3-aca817e84e13" alt=""></p>
<h4 id="苏州"><a href="#苏州" class="headerlink" title="苏州"></a>苏州</h4><p><img src="http://7xread.com1.z0.glb.clouddn.com/941809ae-aa37-4a3b-89c7-10646cc7e3e7" alt=""></p>
<h4 id="深圳"><a href="#深圳" class="headerlink" title="深圳"></a>深圳</h4><p><img src="http://7xread.com1.z0.glb.clouddn.com/86712397-27ec-4b37-bbf8-81191e530ef6" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在线地址：&lt;a href=&quot;http://codelover.link:8080/&quot;&gt;58同城品牌公寓高德搜房&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github地址：&lt;a href=&quot;https://github.com/liguobao/58HouseSearch&quot; target=&quot;_
    
    </summary>
    
      <category term="JavaScript" scheme="http://codelover.link/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>.NET_58同城品牌公寓爬虫</title>
    <link href="http://codelover.link/2016/08/08/58City-House-Crawler/"/>
    <id>http://codelover.link/2016/08/08/58City-House-Crawler/</id>
    <published>2016-08-07T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.496Z</updated>
    
    <content type="html"><![CDATA[<p>源码地址：<a href="https://github.com/liguobao/58HouseSearch" target="_blank" rel="external">https://github.com/liguobao/58HouseSearch</a></p>
<p>在线地址：<a href="http://codelover.link:8080/">58公寓高德搜房(全国版)：http://codelover.link:8080/</a></p>
<p>周末闲着无事刷知乎发现一个爬虫教程（<a href="https://zhuanlan.zhihu.com/p/21883516" target="_blank" rel="external">高德API+Python解决租房问题</a><br>），正中最近想要换地方住的痛点。然后大早上懒觉都没睡就屁颠屁颠开始研究这个教程了。这样教程在实验楼网站里面有手把手步骤，有兴趣自取（<a href="https://www.shiyanlou.com/courses/599" target="_blank" rel="external">实验楼：高德API+Python解决租房问题</a>）。</p>
<p>整体项目主要分成两步：</p>
<p>第一步:python爬取数据，生成数据文件;</p>
<p>第二步：导入数据文件，在地图上显示房源，设定上班地点后自动计算出行路线和路程时间。</p>
<p>研究了一下这个教程之后发现这货做得实在有点粗糙，只能当教程用，完全没有通用实际价值。</p>
<p>而且这里面还有个更大的问题：教程是基于北京的数据来做的，而我在上海…</p>
<p>虽然说改改python数据源，改改导航页面JS完事。不过是在难用…</p>
<p>于是，开始自己动手了。先看原有的python代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">from</span> urlparse <span class="keyword">import</span> urljoin</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> csv</div><div class="line"></div><div class="line">url = <span class="string">"http://bj.58.com/pinpaigongyu/pn/&#123;page&#125;/?minprice=2000_4000"</span></div><div class="line"></div><div class="line"><span class="comment">#已完成的页数序号，初时为0</span></div><div class="line">page = <span class="number">0</span></div><div class="line"></div><div class="line">csv_file = open(<span class="string">"rent.csv"</span>,<span class="string">"wb"</span>) </div><div class="line">csv_writer = csv.writer(csv_file, delimiter=<span class="string">','</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    page += <span class="number">1</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"fetch: "</span>, url.format(page=page)</div><div class="line">    response = requests.get(url.format(page=page))</div><div class="line">    html = BeautifulSoup(response.text)</div><div class="line">    house_list = html.select(<span class="string">".list &gt; li"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 循环在读不到新的房源时结束</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> house_list:</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> house <span class="keyword">in</span> house_list:</div><div class="line">        house_title = house.select(<span class="string">"h2"</span>)[<span class="number">0</span>].string.encode(<span class="string">"utf8"</span>)</div><div class="line">        house_url = urljoin(url, house.select(<span class="string">"a"</span>)[<span class="number">0</span>][<span class="string">"href"</span>])</div><div class="line">        house_info_list = house_title.split()</div><div class="line"></div><div class="line">        <span class="comment"># 如果第二列是公寓名则取第一列作为地址</span></div><div class="line">        <span class="keyword">if</span> <span class="string">"公寓"</span> <span class="keyword">in</span> house_info_list[<span class="number">1</span>] <span class="keyword">or</span> <span class="string">"青年社区"</span> <span class="keyword">in</span> house_info_list[<span class="number">1</span>]:</div><div class="line">            house_location = house_info_list[<span class="number">0</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            house_location = house_info_list[<span class="number">1</span>]</div><div class="line"></div><div class="line">        house_money = house.select(<span class="string">".money"</span>)[<span class="number">0</span>].select(<span class="string">"b"</span>)[<span class="number">0</span>].string.encode(<span class="string">"utf8"</span>)</div><div class="line">        csv_writer.writerow([house_title, house_location, house_money, house_url])</div><div class="line"></div><div class="line">csv_file.close()</div></pre></td></tr></table></figure>
<p>整个代码基本思路就是，爬取<a href="http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。" target="_blank" rel="external">http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。</a><br>通过研究<a href="http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。" target="_blank" rel="external">http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。</a></p>
<p>如下图：</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/685849af-2ccc-4454-a26e-e2a1c3001378" alt=""></p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/909df442-b1d9-4073-84d0-99a5b3cc9022" alt=""></p>
<h4 id="li结构如下："><a href="#li结构如下：" class="headerlink" title="li结构如下："></a>li结构如下：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">logr</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/pinpaigongyu/26851774057013x.shtml"</span></span></div><div class="line">  <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">onclick</span>=<span class="string">"clickLog('from=fcpc_list_gy_sh_tupian')"</span> </div><div class="line">  <span class="attr">tongji_label</span>=<span class="string">"listclick"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">img</span> <span class="attr">lazy_src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"des"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>【合租】菊园新区 柳湖景庭 3室次卧<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"room"</span>&gt;</span></div><div class="line">            3室1厅1卫&amp;nbsp; &amp;nbsp; 13m²&amp;nbsp;&amp;nbsp; 3/6层&amp;nbsp; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"dist"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spec"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spec1"</span>&gt;</span>公共阳台<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spec2"</span>&gt;</span>公共卫生间<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spec3"</span>&gt;</span>离地铁近<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spec4"</span>&gt;</span>厨房<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"money"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>1100<span class="tag">&lt;/<span class="name">b</span>&gt;</span>元/月 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>租房月付<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<p>照着python的思路，是把所有的li标签的数据提取出来的。</p>
<p>我自己研究的时候又看了下，其实数据都在一个属性为tongji_label=”listclick”的a标签里面。</p>
<p>一般来说，字符匹配用正则表达式完事，奈何正则水平实在不佳。我还是选择直接上HtmlAgilityPack算了。<br>关于HtmlAgilityPack的介绍还是看官网算了。<a href="http://htmlagilitypack.codeplex.com/" target="_blank" rel="external">HtmlAgilityPack</a></p>
<p>HtmlAgilityPack是.NET一个比较强大的HTML处理类库了，基本可以让你像JS来操作HTML标签。<br>安装这货很简单，直接在Nuget PM包管理工具里面输入下面命令就完事了。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Install-Package HtmlAgilityPack</div></pre></td></tr></table></figure>
<p>有需要使用教程可以看这个：<a href="http://www.cnblogs.com/ITmuse/archive/2010/05/29/1747199.html" target="_blank" rel="external">Html Agility Pack基础类介绍及运用</a></p>
<p>下面直接贴control源码算了。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="costFrom"&gt;</span>价格区间起始值<span class="doctag">&lt;/param&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="costTo"&gt;</span>价格区间终止值<span class="doctag">&lt;/param&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="cnName"&gt;</span>城市拼音首字母<span class="doctag">&lt;/param&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Get58CityRoomData</span>(<span class="params"><span class="keyword">int</span> costFrom, <span class="keyword">int</span> costTo, <span class="keyword">string</span> cnName</span>)</span></div><div class="line">       &#123;</div><div class="line">           <span class="keyword">if</span> (costTo&lt;=<span class="number">0</span> || costTo &lt; costFrom)</div><div class="line">           &#123;</div><div class="line">               <span class="keyword">return</span> Json(<span class="keyword">new</span> &#123; IsSuccess = <span class="literal">false</span>, Error = <span class="string">"输入数据有误，请重新输入。"</span> &#125;);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(cnName))</div><div class="line">           &#123;</div><div class="line">               <span class="keyword">return</span> Json(<span class="keyword">new</span> &#123; IsSuccess = <span class="literal">false</span>, </div><div class="line">               Error = <span class="string">"城市定位失败，建议清除浏览器缓存后重新进入。"</span> &#125;);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">try</span></div><div class="line">           &#123;</div><div class="line">               <span class="keyword">var</span> lstHouse = <span class="keyword">new</span> List&lt;HouseInfo&gt;();</div><div class="line"></div><div class="line">               <span class="keyword">string</span> tempURL = <span class="string">"http://"</span> + </div><div class="line">               cnName + <span class="string">".58.com/pinpaigongyu//pn/&#123;0&#125;/?minprice="</span></div><div class="line">               + costFrom + <span class="string">"_"</span> + costTo;</div><div class="line"></div><div class="line">               Uri uri = <span class="keyword">new</span> Uri(tempURL);</div><div class="line"></div><div class="line">               <span class="keyword">var</span> htmlResult = HTTPHelper.GetHTMLByURL(<span class="keyword">string</span>.Format(tempURL, <span class="number">1</span>));</div><div class="line"></div><div class="line">               HtmlDocument htmlDoc = <span class="keyword">new</span> HtmlDocument();</div><div class="line">               htmlDoc.LoadHtml(htmlResult);</div><div class="line"></div><div class="line">               <span class="keyword">var</span> countNodes = htmlDoc.DocumentNode.</div><div class="line">               SelectSingleNode(<span class="string">".//span[contains(@class,'list')]"</span>);</div><div class="line">               <span class="keyword">int</span> pageCount = <span class="number">10</span>;</div><div class="line"></div><div class="line">               <span class="keyword">if</span> (countNodes != <span class="literal">null</span> &amp;&amp; countNodes.HasChildNodes)</div><div class="line">               &#123;</div><div class="line">                   pageCount = Convert.ToInt32(countNodes.ChildNodes[<span class="number">0</span>].InnerText) / <span class="number">20</span>;</div><div class="line"></div><div class="line">                   <span class="keyword">if</span>(pageCount==<span class="number">0</span>)</div><div class="line">                   &#123;</div><div class="line">                       <span class="keyword">return</span> Json(<span class="keyword">new</span> &#123; IsSuccess = <span class="literal">false</span>, </div><div class="line">                       Error =<span class="keyword">string</span>.Format(<span class="string">"没有找到价格区间为&#123;0&#125; - &#123;1&#125;的房子。"</span>,</div><div class="line">                       costFrom,costTo)&#125;);</div><div class="line">                   &#125;</div><div class="line">                   </div><div class="line">               &#125;</div><div class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> pageIndex = <span class="number">1</span>; pageIndex &lt;= pageCount; pageIndex++)</div><div class="line">               &#123;</div><div class="line">                   htmlResult = HTTPHelper.GetHTMLByURL(<span class="keyword">string</span>.Format(tempURL, pageIndex));</div><div class="line">                   htmlDoc.LoadHtml(htmlResult);</div><div class="line">                   <span class="keyword">var</span> roomList = htmlDoc.DocumentNode</div><div class="line">                   .SelectNodes(<span class="string">".//a[contains(@tongji_label,'listclick')]"</span>);</div><div class="line">                   <span class="keyword">foreach</span> (<span class="keyword">var</span> room <span class="keyword">in</span> roomList)</div><div class="line">                   &#123;</div><div class="line">                       <span class="keyword">var</span> houseTitle = room.SelectSingleNode(<span class="string">".//h2"</span>).InnerHtml;</div><div class="line">                       <span class="keyword">var</span> houseURL = uri.Host + room.Attributes[<span class="string">"href"</span>].Value;</div><div class="line">                       <span class="keyword">var</span> house_info_list = houseTitle.Split(<span class="string">' '</span>);</div><div class="line">                       <span class="keyword">var</span> house_location = <span class="keyword">string</span>.Empty;</div><div class="line">                       <span class="keyword">if</span> (house_info_list[<span class="number">1</span>].Contains(<span class="string">"公寓"</span>) </div><div class="line">                       || house_info_list[<span class="number">1</span>].Contains(<span class="string">"青年社区"</span>))</div><div class="line">                       &#123;</div><div class="line">                           house_location = house_info_list[<span class="number">0</span>];</div><div class="line">                       &#125;</div><div class="line">                       <span class="keyword">else</span></div><div class="line">                       &#123;</div><div class="line">                           house_location = house_info_list[<span class="number">1</span>];</div><div class="line">                       &#125;</div><div class="line">                       <span class="keyword">var</span> momey = room.SelectSingleNode(<span class="string">".//b"</span>).InnerHtml;</div><div class="line"></div><div class="line">                       lstHouse.Add(<span class="keyword">new</span> HouseInfo()</div><div class="line">                       &#123;</div><div class="line">                           HouseTitle = houseTitle,</div><div class="line">                           HouseLocation = house_location,</div><div class="line">                           HouseURL = houseURL,</div><div class="line">                           Money = momey,</div><div class="line">                       &#125;);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="keyword">return</span> Json(<span class="keyword">new</span> &#123; IsSuccess = <span class="literal">true</span>, HouseInfos = lstHouse &#125;);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (Exception ex)</div><div class="line">           &#123;</div><div class="line">               <span class="keyword">return</span> Json(<span class="keyword">new</span> &#123; IsSuccess = <span class="literal">false</span>,</div><div class="line">               Error = <span class="string">"获取数据异常。"</span> + ex.ToString() &#125;);</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>下面解释一下核心代码。</p>
<p>片段一：获取总数。</p>
<p>在观察58同城页面的时候，无意发现其实第一个加载的页面中有一个数据总条数，隐藏在页面里面的。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"listsum"</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>1813<span class="tag">&lt;/<span class="name">em</span>&gt;</span>条结果<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这样一来，总页面就很清晰了。页面=总数/每页20条。然后我们根据已知的数据规则去循环请求页面，也就能拿到所有的搜索数据了。</p>
<p>核心代码，获取总条数。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var <span class="attr">countNodes</span> = htmlDoc.DocumentNode.</div><div class="line">SelectSingleNode(<span class="string">".//span[contains(@class,'list')]"</span>);</div><div class="line">int <span class="attr">pageCount</span> = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (countNodes != <span class="literal">null</span> &amp;&amp; countNodes.HasChildNodes)</div><div class="line">&#123;</div><div class="line">    <span class="attr">pageCount</span> = Convert.ToInt32(countNodes.ChildNodes[<span class="number">0</span>].InnerText) / <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="attr">pageCount==0)</span></div><div class="line">    &#123;</div><div class="line">        return Json(new &#123; <span class="attr">IsSuccess</span> = <span class="literal">false</span>, </div><div class="line">        <span class="attr">Error</span> =string.Format(<span class="string">"没有找到价格区间为&#123;0&#125; - &#123;1&#125;的房子。"</span>,</div><div class="line">        costFrom,costTo)&#125;);</div><div class="line">    &#125;</div><div class="line">                    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在HTMLDoc里面找到一个span的class包含list的节点，获取它子节点（即em）的内容，强制转换成数字，也就是我们要找的总条数了。总条数除以20就得到了页数，下面就是开始循环请求页面了。</p>
<p>在最上面我们分析过公寓数据分布，数据是li里面套a标签，我们需要的地理位置、房间名称、价格都在a标签里面。</p>
<p>这样一来，我们这要获得到页面所有带有属性为tongji_label=”listclick”的a标签数据，也就得到了我们所有需要的数据。</p>
<p>看一下a标签的数据组成：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/pinpaigongyu/26851774057013x.shtml"</span></span></div><div class="line"> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">onclick</span>=<span class="string">"clickLog('from=fcpc_list_gy_sh_tupian')"</span> </div><div class="line"> <span class="attr">tongji_label</span>=<span class="string">"listclick"</span>&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">lazy_src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"des"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">h2</span>&gt;</span>【合租】菊园新区 柳湖景庭 3室次卧<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"room"</span>&gt;</span></div><div class="line">           3室1厅1卫&amp;nbsp; &amp;nbsp; 13m²&amp;nbsp;&amp;nbsp; 3/6层&amp;nbsp; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"dist"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"spec"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spec1"</span>&gt;</span>公共阳台<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spec2"</span>&gt;</span>公共卫生间<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spec3"</span>&gt;</span>离地铁近<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spec4"</span>&gt;</span>厨房<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"money"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>1100<span class="tag">&lt;/<span class="name">b</span>&gt;</span>元/月 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>租房月付<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们要的房间信息在一个h2的标签里面，公寓租金价钱在class=”money”的div标签里面。</p>
<p>于是有了一下代码：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> pageIndex = <span class="number">1</span>; pageIndex &lt;= pageCount; pageIndex++)</div><div class="line">&#123;</div><div class="line">    htmlResult = HTTPHelper.GetHTMLByURL(<span class="keyword">string</span>.Format(tempURL, pageIndex));</div><div class="line">    htmlDoc.LoadHtml(htmlResult);</div><div class="line">    <span class="comment">//找到所有的带有属性为tongji_label="listclick"的a标签数据</span></div><div class="line">    <span class="keyword">var</span> roomList = htmlDoc.DocumentNode.SelectNodes(<span class="string">".//a[contains(@tongji_label,'listclick')]"</span>);</div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> room <span class="keyword">in</span> roomList)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//获取其中为h2的房间数据，然后用空格分割成数组</span></div><div class="line">        <span class="keyword">var</span> houseTitle = room.SelectSingleNode(<span class="string">".//h2"</span>).InnerHtml;</div><div class="line">        <span class="keyword">var</span> houseURL = uri.Host + room.Attributes[<span class="string">"href"</span>].Value;</div><div class="line">        <span class="keyword">var</span> house_info_list = houseTitle.Split(<span class="string">' '</span>);</div><div class="line">        <span class="keyword">var</span> house_location = <span class="keyword">string</span>.Empty;</div><div class="line">        <span class="comment">//分割出来的数组，第二个包含公寓或青年社区，则取第一个数据为所在地区，否则取第二个数据</span></div><div class="line">        <span class="comment">//【合租】菊园新区 柳湖景庭 3室次卧 </span></div><div class="line">        <span class="comment">// 所在地区为：菊园新区</span></div><div class="line">        <span class="keyword">if</span> (house_info_list[<span class="number">1</span>].Contains(<span class="string">"公寓"</span>) || house_info_list[<span class="number">1</span>].Contains(<span class="string">"青年社区"</span>))</div><div class="line">        &#123;</div><div class="line">            house_location = house_info_list[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            house_location = house_info_list[<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//获取标签为b的数据，价格就在里面了</span></div><div class="line">        <span class="keyword">var</span> momey = room.SelectSingleNode(<span class="string">".//b"</span>).InnerHtml;</div><div class="line"></div><div class="line">        lstHouse.Add(<span class="keyword">new</span> HouseInfo()</div><div class="line">        &#123;</div><div class="line">            HouseTitle = houseTitle,</div><div class="line">            HouseLocation = house_location,</div><div class="line">            HouseURL = houseURL,</div><div class="line">            Money = momey,</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后端来说，基本就这些内容了。</p>
<p>还有一些前端高德地图接口调用下次再讲吧，要陪女票玩游戏去了…</p>
<p>^-^</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/liguobao/58HouseSearch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/liguobao/58HouseSearch&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term=".net" scheme="http://codelover.link/categories/net/"/>
    
    
      <category term="58City" scheme="http://codelover.link/tags/58City/"/>
    
      <category term="Crawler" scheme="http://codelover.link/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core Middleware</title>
    <link href="http://codelover.link/2016/08/01/ASP.NET-Core-Middleware/"/>
    <id>http://codelover.link/2016/08/01/ASP.NET-Core-Middleware/</id>
    <published>2016-07-31T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.550Z</updated>
    
    <content type="html"><![CDATA[<p>在ASP.NET 时代，一般来说我们很少会用到HttpModule/HttpHandler，然而有些场景我们使用HttpModule/HttpHandler倒方便快捷完成我们的需求。有兴趣了解HttpModule/HttpHandler以及使用场景的话，可以看下面这个链接的内容。</p>
<p><a href="http://www.cnblogs.com/fish-li/archive/2013/01/04/2844908.html" target="_blank" rel="external">选择HttpHandler还是HttpModule？</a></p>
<p>来到ASP.NET Core时代，类似功能的内容可能我们看得就要多得多了。因为在ASP.NET Core时代，微软将HttpModule“变更”之后，并为它授予了更灵活应用场景。</p>
<p>这就是这个文章要介绍的主角：Middleware（中间件）。</p>
<h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h2><p>为了使用跨平台，ASP.NET Core整个架构和代码都重写了一遍，所以 HttpModule 自然也就不存在了。但是相似的功能还是有的，它的名字叫： Middleware。和以前不同，在ASP.NET Core中我们将会经常看到 Middleware的存在，因为现在的每一个服务都是用Middleware的方式呈现在ASP.NET Core 管道中。不仅如此，meddleware比起之前的HttpModule也更弹性易用了。</p>
<p>首先先来看看什么是middleware。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, </span></span></div><div class="line">                      ILoggerFactory loggerFactory)</div><div class="line">&#123;</div><div class="line">    loggerFactory.AddConsole(Configuration.GetSection(<span class="string">"Logging"</span>));</div><div class="line">    loggerFactory.AddDebug();</div><div class="line"></div><div class="line">    app.UseStaticFiles();</div><div class="line"></div><div class="line">    app.UseMvc(routes =&gt;</div><div class="line">    &#123;</div><div class="line">        routes.MapRoute(<span class="string">"default"</span>,</div><div class="line">        <span class="string">"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看过ASP.NET Core项目的话，相信大家对Satarup.cs并不会陌生。在Starup.cs里面便有一个Configure()函数用于定义项目需要使用哪些middleware。</p>
<p>上面的例子使用了两个middleware，一个是 UseStaticFiles，另一个是 UseMvc。这两个都是core自带的middleware，所以我们可以直接使用。UseStaticFiles 是为HTTP Request提供存取网站的文件，简单理解就是使得网站上的静态文件可访问，而UseMvc就是启用MVC routing机制。有了这两个middleware，我们的的网站就有了MVC routing和读取静态文件的功能。</p>
<p>如果我们把UseMvc去掉，那么MVC routing也就不存在了，我们输入 <a href="http://website/[Controller]/[Action" target="_blank" rel="external">http://website/[Controller]/[Action</a>] 类似的地址也就无效了。</p>
<h3 id="和HttpModule的不同之处"><a href="#和HttpModule的不同之处" class="headerlink" title="和HttpModule的不同之处"></a>和HttpModule的不同之处</h3><p>在使用HttpModule的时候，我们是在实现/重写接口，这个时候就要求我们在适当的地方做适当的事情。例如，要做 authorization 的话就最好在 HttpModule 定义好的 Authorization 事件 (AuthorizatRequest) 中完成这个功能。在 ASP.NET life cycle 的文件里我们可以查到 HttpModule  定义了那些事件，每一個事件都有哪些特別的功能。因此我们需要全面了解之后再来选择实现/重写我们需要的事件。而在Middleware中，完全没有这样的限制，也不存在这样的事件，我们可以自行设计实现我们的机制。</p>
<h2 id="Middleware-流程"><a href="#Middleware-流程" class="headerlink" title="Middleware 流程"></a>Middleware 流程</h2><p><a href="https://docs.asp.net/en/latest/fundamentals/middleware.html" target="_blank" rel="external">https://docs.asp.net/en/latest/fundamentals/middleware.html</a> 这个文章中说明了基本的middleware概念。目前asp.net docs里面有不少的内容都是开源社区开发者贡献的</p>
<p>在这个文章里面有一个简单的流程图说明了ASP.NET runtime中middleware的执行过程。</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/0b6d43ad-7d95-48ea-bbf3-ea7a93c4a366" alt="middleware执行过程"></p>
<p>在 middleware 里面一定要定义 Invoke()函数，因为这是让 engine 默认调用 middleware 的Incoke函数。Middleware 里面所需要做什么事情就放在 Invoke() 里面，同时 Invoke() 里面还需要调用下一个 middleware。因此执行内容就如上图所示。Middleware 之间除了必须传送 HttpContext之外，也可以自定义传入其他的参数，这比以前的HttpModule方便多了。</p>
<p>所以当 HTTP request 进来之后，engine 便会呼叫第一个 middleware 的 Invoke()，同时把传入HttpContext，然后第一个 middleware 可以再接着呼叫第二个 middleware 的 Invoke()，同时再把 HttpContext 继续传入，一直到最后一个middleware 的 Invoke() 结束之后，整个 HttpContext 的內容可能在 middleware 里面新增或被改变了，最后再按照整個原先的 call stack 从最后一个 middleware 回到第一个 middleware，再通过  engine 回传到client 端，完成request.</p>
<p>下来通过一个例子我们一起来了解一下Middleware。</p>
<h2 id="编写简单的-Middleware"><a href="#编写简单的-Middleware" class="headerlink" title="编写简单的 Middleware"></a>编写简单的 Middleware</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SampleMiddleware</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleMiddleware</span>(<span class="params">RequestDelegate next</span>)</span></div><div class="line">    &#123;</div><div class="line">        _next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Invoke</span>(<span class="params">HttpContext context</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(context.User.Identity.Name))</div><div class="line">        &#123;</div><div class="line">            context.Response.Redirect(<span class="string">"/NoName.html"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">await</span> _next.Invoke(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这一个middleware的名字叫SampleMiddleware。它有一个构造函数以及Invoke函数，而Invoke()只接收一个参数HttpContext。</p>
<p>_next是一个叫 RequestDelegate类型，换言之这就是一个delegate，用于代表下一个middleware是谁。所以在构造函数中要把下一个middleware delegate传入。看到这里或许会觉得奇怪，我们的middleware在执行过程中怎么会知道下一个middleware是谁？这一部分稍后解释。</p>
<p>在 Invoke() 里面，在 await _next.Invoke() 之前都是当前middleware的逻辑代码，从上面流程图来看的话就是由左自右的方向． await _next.Invoke() 之后的代码是就是流程图上由右至右的方向，因此，透過这样简单的设计，开发者就能很明确地控制什么样逻辑要先做或后做了。</p>
<p>在 SampleMiddleware 之中，这里只做了一個很简单的动作，如果 username 是空白的话，就将该连接重定向到到 NoName.html 然后中断 middleware 的执行。</p>
<p>为了能让这个middleware作为 ApplicationBuilder来使用，我们另外需要写一个扩展方法。代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MiddlewareExtensions</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApplicationBuilder <span class="title">UseSampleMiddleware</span>(<span class="params"></span></span></div><div class="line">    <span class="keyword">this</span> IApplicationBuilder builder)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> builder.UseMiddleware&lt;SampleMiddleware&gt;();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这给扩展方法建立了UseSampleMiddleware()，使得我们可以让ApplicationBuilder 去读 SampleMiddleware。</p>
<p>这是回到Startup.cs中，在 Configure() 里面我们就可以把 SampleMiddleware 加入到我们的 pipeline中了。具体代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app,IHostingEnvironment env, </span></span></div><div class="line">                      ILoggerFactory loggerFactory)</div><div class="line">&#123;</div><div class="line">    loggerFactory.AddConsole(Configuration.GetSection(<span class="string">"Logging"</span>));</div><div class="line">    loggerFactory.AddDebug();</div><div class="line"></div><div class="line">    app.UseStaticFiles();</div><div class="line"></div><div class="line">    app.UseSampleMiddleware();   <span class="comment">// &lt;-- SampleMiddleware</span></div><div class="line"></div><div class="line">    app.UseMvc(routes =&gt;</div><div class="line">    &#123;</div><div class="line">        routes.MapRoute(<span class="string">"default"</span>,</div><div class="line">        <span class="string">"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>把 SampleMiddleware 放在 UseStaticFiles 和 UseMvc 之间，也就是说在 http request 还沒进入到 MVC routing 之前，就会先检查 HttpContext 里面是不是有空白的 username。很显然username肯定是空白的，因为我并沒有加入任何使用者验证代码这里面，所以利用 dotnet run 來运行这个项目的时候，你就会看到 Http code 302 出現，它的意思就是 http redirect，也就是 SampleMiddleware 里面面所做的 redirect 发生作用了。</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/1d7e4c87-9fff-4401-8933-36dcbf857199" alt="http redirect"></p>
<h2 id="Middleware-的执行顺序很重要"><a href="#Middleware-的执行顺序很重要" class="headerlink" title="Middleware 的执行顺序很重要"></a>Middleware 的执行顺序很重要</h2><p>前面解释了 middleware 执行过程是一个接着一个的．不同的 middleware 对 HttpContext 的內容都可能有不同的处理或更改，因此执行舒服便格外重要。举个例子，如果将上面 Configure() 的代码变更如下:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env,</span></span></div><div class="line">                       ILoggerFactory loggerFactory)</div><div class="line">&#123;</div><div class="line">    loggerFactory.AddConsole(Configuration.GetSection(<span class="string">"Logging"</span>));</div><div class="line">    loggerFactory.AddDebug();</div><div class="line"></div><div class="line">    app.UseSampleMiddleware();   <span class="comment">// SampleMiddleware</span></div><div class="line"></div><div class="line">    app.UseStaticFiles();        <span class="comment">// StaticFiles</span></div><div class="line"></div><div class="line">    app.UseMvc(routes =&gt;</div><div class="line">    &#123;</div><div class="line">        routes.MapRoute(<span class="string">"default"</span>,<span class="string">"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们把SampleMiddleware 放到StaticFiles 之前。这就导致在 SampleMiddleware 里重定向到 NoName.html会失败。</p>
<p>为什么会失败呢? 因为我们的 ApplicationBuilder 执行到行到 SampleMiddleware 时候重定向到NoName.html，也就是做读取静态页面，而这个功能服务方是在下一个 middleware (StaticFiles) 才会提供的，因此 ApplicationBuilder 无法找到 NoName.html，所以在浏览器上也就看不到 NoName.html 的內容。</p>
<h4 id="Middleware-这样的设计带来了很大的方便和弹性，同時我们自己也要小心-middleware-前后相依性的问题。"><a href="#Middleware-这样的设计带来了很大的方便和弹性，同時我们自己也要小心-middleware-前后相依性的问题。" class="headerlink" title="Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。"></a>Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。</h4><h2 id="Middleware-背后原理"><a href="#Middleware-背后原理" class="headerlink" title="Middleware 背后原理"></a>Middleware 背后原理</h2><p>现在 ASP.NET Core 已是开源项目了，所以最后说明一下 middleware 原理的基本概念．整個 ASP.NET fundamental 的部份用了许多的 function delegate , task, denepdency injection 的编写方法，所以要看 source code 之前，建议先对这三个东西先行了解，这样对理解 ASP.NET Core源码很有帮助．</p>
<p>在前面的代码中，我们看到 RequestDelegate,  顾名思义就知道这是一个delegate（委托），它是用来代表 middleware 的 delegate. 它的 source code 在 <a href="https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/RequestDelegate.cs" target="_blank" rel="external">RequestDelegate.cs</a></p>
<p>IApplicationBuilder interface 是一個相当重要的接口，它定义了整個APP要用哪些服务和參數，当然也包含要使用那些 middleware，它的 souce code 在 <a href="https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/IApplicationBuilder.cs" target="_blank" rel="external">IApplicationBuilder.cs</a>。</p>
<p>其中你可以看到 Use()，通过 Use() 的实例就可以把 middleware delegate 注册到 host engine 上。</p>
<p>另外一个就是 UseMiddlewareExtensions ，前面的代码曾用了 builder.UseMiddleware<samplemiddleware>(); 它会检查你写的 middleware 是不是合法的，比如有沒有 Invoke()，是不是只有一个Invoke()，Invoke() 的参数有沒有一个是 HttpContext type，所有的检查都通过之后便建立出该middleware instance 的 delegate。</samplemiddleware></p>
<p>因此，当你的 ASP.NET Core APP刚启动的时候，在 Startup.cs 的 Configure() 就会把所有的 middleware delegate 建立起來，然后依序地放到內部的 stack 结构中。以上面的范例来说， stack 结构第一个元素是 StaticFiles,  然后是 SampleMiddleware 最后是 Mvc。接着每個 middleware 要被建立时是做 stack pop 的操作，所以 Mvc 的 _next 是 engine 里一些內部的 middleware 处理器，然後 pop 出 SampleMiddleware 时，就把 SampleMiddleware 的 _next 指向前面一個 pop 出來的 Mvc。依照着这样的逻辑一直到最前面的 middleware。所以在 host engine 在 Build() 之前这些动作都会完成，然后 host engine 才能执行Run()。有关 host engine 可參考<br><a href="https://github.com/aspnet/hosting/blob/master/src/Microsoft.AspNet.Hosting/WebHostBuilder.cs" target="_blank" rel="external">WebHostBuilder.cs</a></p>
<p>全文完。</p>
<p>本文整理于<a href="https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191" target="_blank" rel="external">https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191</a>并已征得作者同意。<br>感谢Bruce的分享。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在ASP.NET 时代，一般来说我们很少会用到HttpModule/HttpHandler，然而有些场景我们使用HttpModule/HttpHandler倒方便快捷完成我们的需求。有兴趣了解HttpModule/HttpHandler以及使用场景的话，可以看下面这个链接的
    
    </summary>
    
      <category term=".net core" scheme="http://codelover.link/categories/net-core/"/>
    
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 启动方式（Hosting）</title>
    <link href="http://codelover.link/2016/07/28/asp.net-core-startup/"/>
    <id>http://codelover.link/2016/07/28/asp.net-core-startup/</id>
    <published>2016-07-27T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.829Z</updated>
    
    <content type="html"><![CDATA[<p>之前版本的ASP.NET程序必须依赖IIS来启动，而IIS上会为挂载在其中的ASP.NET 注册一个ISAPI filter。每当http请求过来时，IIS则会启动w3wp的worker process来开始整个ASP.NET runtime程序。相信大家都这样的流程都有相应的了解。在.net core之前，ASP.NET的主要场景都是运行在Windows平台的，IIS也就是web server的首选了。虽然也有类似于jexus的linux webserver可用，但是基于mono的.NET 总体还是不够Microsoft 原生的强。</p>
<p>不过到了现在，一切都不同了。</p>
<p>新版ASP.NET Core有了.NET Core的支援后已经开始了它的跨平台之旅了，因此ASP.NET Core的启动方式也得开始重新设计以适应新需求了。</p>
<h3 id="1、Kestrel-和-IIS-platform-handler"><a href="#1、Kestrel-和-IIS-platform-handler" class="headerlink" title="1、Kestrel 和 IIS platform handler"></a>1、Kestrel 和 IIS platform handler</h3><p>在 ASP.NET Core 中，整个runtime都是重写过的，所以它和IIS之间的关系也有所改变。而ASP.NET Core为了跨平台，它现在的执行方式就如一般的Console app一样。ASP.NET Core自带一个高性能的I/O组件 - Kestrel，使得它可以不依赖IIS的存在便启动了runtime。不过Kestrel 也只是一个I/O组件，并没有想IIS提供其它的功能来保护和管理ASP.NET 应用程序。ASP.NET Core同样可以通过IIS进行处理。但是如果通过IIS来进行处理的话，这个时候我们便需要一个“中间人”的角色来负责这个功能了。这个“中间人”的名字叫 Http Platform Handler，主要表现在web.config文档中的设置，其中包括启动ASP.NET Core 程序的的路径和名称，需要传入的参数以及一些其他的设置选项。Http Platform Handler的具体设置例子如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;system.webServer&gt;</div><div class="line">    &lt;handlers&gt;</div><div class="line">      &lt;add name=<span class="string">"httpPlatformHandler"</span> path=<span class="string">"*"</span> verb=<span class="string">"*"</span></div><div class="line">      modules=<span class="string">"httpPlatformHandler"</span> resourceType=<span class="string">"Unspecified"</span>/&gt;</div><div class="line">    &lt;/handlers&gt;</div><div class="line">    &lt;httpPlatform processPath=<span class="string">"WebApp.exe"</span> arguments=<span class="string">""</span> </div><div class="line">    stdoutLogEnabled=<span class="string">"false"</span> startupTimeLimit=<span class="string">"3600"</span>/&gt;</div><div class="line">  &lt;/system.webServer&gt;</div></pre></td></tr></table></figure></p>
<p>关于Http Platform Handler的相关资料可以看这个链接：<br><a href="http://www.iis.net/downloads/microsoft/httpplatformhandler" target="_blank" rel="external">http://www.iis.net/downloads/microsoft/httpplatformhandler</a></p>
<p>从上面的例子可以看出来，ASP.NET Core编译之后便是一个EXE程序，使得你可以直接运行。因此，当HTTP请求进来时，IIS先接受请求，然后根据你设置的web.config的内容将请求转发给WebApp.exe（你的ASP.NET Core程序），然后WebApp.exe开始执行时便会启动Kestrel，接着这个HTTP请求便进入了ASP.NET Core runtime的世界。这样看来，IIS这时候只是一个简单的proxy/forwarder角色。</p>
<p>PS：在我翻译整理这个文章的时候，世界已经发生了变化：下个版本的asp.net core 将会有全新的IIS module来取代Http Platform Handler。</p>
<p>具体详细资料见：<a href="https://github.com/aspnet/IISIntegration/issues/105" target="_blank" rel="external">https://github.com/aspnet/IISIntegration/issues/105</a></p>
<h3 id="2、Main"><a href="#2、Main" class="headerlink" title="2、Main()"></a>2、Main()</h3><p>ASP.NET Core和其他的.NET 程序一样拥有一个static void Main(),这是整个runtime的进入点。下面看一个样例：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">       &#123;</div><div class="line">           <span class="keyword">var</span> host = <span class="keyword">new</span> WebHostBuilder()</div><div class="line">               .UseServer(<span class="string">"Microsoft.AspNetCore.Server.Kestrel"</span>)</div><div class="line">               .UseContentRoot(Directory.GetCurrentDirectory())</div><div class="line">               .UseDefaultConfiguration(args)</div><div class="line">               .UseIISPlatformHandlerUrl()</div><div class="line">               .UseStartup&lt;Startup&gt;()</div><div class="line">               .Build();</div><div class="line"></div><div class="line">           host.Run();</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p>ASP.NET Core host engine 的建立者是 WebHostBuilder．</p>
<p>它实质上是一个了 IWebHostBuilder interface，其中 UseServer() 是用于指定使用什么样的 server。</p>
<p>其中 UseServer() 有一个扩展方法UseServer(string assemblyName)。这样的话我们可以直接传入Kestrel的程序集名称:”Microsoft.AspNetCore.Server.Kestrel”。当然，这只是其中一种选项。你也可以自己实现一个自己的 server，只要你的 server 实现了 IServerFactory interface 即可。这样的设计提供了一个很大的弹性空间让我们自行选择hosting server（托管服务）。</p>
<h3 id="UseContentRoot"><a href="#UseContentRoot" class="headerlink" title="UseContentRoot()"></a>UseContentRoot()</h3><ul>
<li>这个扩展方法是让我们指定应用程序的工作目录（working directory），如果我们没有指定的话，则会默认为我们的应用（webapp.exe）所在目录为工作目录。</li>
</ul>
<h3 id="UseDefaultConfiguration"><a href="#UseDefaultConfiguration" class="headerlink" title="UseDefaultConfiguration()"></a>UseDefaultConfiguration()</h3><ul>
<li>这个扩展方法使得我们在IWebHostBuilder 建立可以传入一些参数，比如 application key, environment name, server factory location, content root path 等等．因此，当我们在运行 WebApp.exe 的时候，同时可以带入我们需要用到的hosting参数（PS：这样的做法就像运行命令行程序时带入参数，多好玩）。这些参数也可以写在appsettings.json里面通过Configuration来读取。<br>所以，UseDefaultConfiguration() 也不一定非要存在于 Main() 之中。（？？？个人不是很理解）</li>
</ul>
<p>PS：原作者原话，”如果我沒记错的话，在写这个文章的时候，UseDefaultConfiguration() 已经被改为成了UseDefaultHostingConfiguration()．显然这个名称更能清楚明白．”(？？？个人还没实践)</p>
<h3 id="UseIISPlatofmrHandleUrl"><a href="#UseIISPlatofmrHandleUrl" class="headerlink" title="UseIISPlatofmrHandleUrl()"></a>UseIISPlatofmrHandleUrl()</h3><ul>
<li>这个 IWebHostBuilder 的 扩展方法比较特殊。如果你要把 ASP.NET Core 放在 IIS 下，这个扩展方法会读取 IIS http platform handler 的 server port 和 application path，用于作为 ASP.NET Core 的启动位置，如 <a href="http://localhost:5000/start．如果你沒用" target="_blank" rel="external">http://localhost:5000/start．如果你沒用</a> IIS，这个扩展方法对你来说基本是用不上的．</li>
</ul>
<h3 id="UseStartup-lt-gt"><a href="#UseStartup-lt-gt" class="headerlink" title="UseStartup&lt;&gt;()"></a>UseStartup&lt;&gt;()</h3><ul>
<li>这是 WebHostBuilder 里相当重要的一个扩展方法。它的方法签名如下：</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder UseStartup&lt;TStartup&gt;</div><div class="line">(<span class="keyword">this</span> IWebHostBuilder hostBuilder) <span class="keyword">where</span> TStartup : <span class="keyword">class</span></div></pre></td></tr></table></figure>
<p>这里你可以很清楚地看到 &lt;&gt; 里面要放的就是一个 class。</p>
<p>在我们这里的范例中，它的名字是 Startup，里面最重要的就是需要定义要使用那些服务(service)以及要使用那些中间件(middleware)。</p>
<h3 id="3、Startup"><a href="#3、Startup" class="headerlink" title="3、Startup"></a>3、Startup</h3><p>这是一个非常非常重要的class,在ASP.NET Core范例中一般都把它命名成Startup。其实我们把它命名成其他名字也是可以的，或者设定多个Startup。上面的内容可以看到，UseStartup()指定了谁是starup class。然后在Build()便会实例化starup class，之后便执行里面两个重要的方法：ConfigureServices() 和 Configure()。</p>
<p>我们先來看 Startup 的构造函数.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IHostingEnvironment env</span>)</span></div><div class="line">       &#123;</div><div class="line">           <span class="comment">// Set up configuration sources.</span></div><div class="line">           <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</div><div class="line">               .AddJsonFile(<span class="string">"appsettings.json"</span>)</div><div class="line">               .AddJsonFile(<span class="string">$"appsettings.<span class="subst">&#123;env.EnvironmentName&#125;</span>.json"</span>, optional: <span class="literal">true</span>)</div><div class="line">               .AddEnvironmentVariables();</div><div class="line">           Configuration = builder.Build().ReloadOnChanged(<span class="string">"appsettings.json"</span>);</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>Host engine 在被执行 Build()时已经知道 startup type 是 Startup class，所以在 Build() 的时候会先创建期示例。在我们这里的是调用Startup类带参数的构造函数。</p>
<p>在我们这个例子中选择的是传入IHostingEnvironment示例，它为我们带来了环境变量（EnvironmentName）。</p>
<p>我们这里主要目的是把Configuration实例化。这是一个蛮重要的基础组件，以后会有文章来说明它。</p>
<p>在这里我们特别说明一下，上面的示例代码中，我们执行了两次 AddJsonFile()，而且第二个json file的参数和第一个的还不太一样。这样的目的是为了让开发者可以把开发环境使用的环境参数和其他环境使用的参数有所区别。比如，你使用的开发环境用的是appsettings.json，这个文件只存在于你的电脑中。另一个文档是appsettings.production.json，这是正式环境使用的参数设定文档。第二個 AddJsonFile() 第二個参数是 true，也就是可能不存在的意思。所以若遇到重复名称参数时，appsettings.production.json 会覆盖 appsettings.json 的內容。这样使得开发环境和生产环境得以区分。</p>
<p>接下来，在 IWebHostBuilder 的 Build()里面会执行 host engine 初始化的程序，其中就会去找Startup class里面的两个方法： ConfigureServices() 和 Configure()。</p>
<p> ConfigureSerivces() 是定义了这个 web application 要使用那些服务，然后将这些服务放在 service container (IServiceCollection) 裡面。如下面的样例：</p>
 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">     &#123;</div><div class="line">         <span class="comment">// add entity framework</span></div><div class="line">         services.AddEntityFramework()</div><div class="line">                 .AddDbContext&lt;BlogsContext&gt;(o =&gt; o.UseSqlServer(Configuration[<span class="string">"Data1:DefaultConnection:ConnectionString"</span>]))</div><div class="line">          </div><div class="line">         <span class="comment">// Add framework services.</span></div><div class="line">         services.AddMvc();</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>它定义了entity framework和mvc两个服务。这里所谓的服务（services）的意思也就是通过它们带入更庞大的程序代码。这听起来好像有点搞笑，但也真的如此。像Entity framework 里面有这么多的代码，一定都需要带入许多定义好的物件或者参数，而不只是一个程序的进去点而已，所以services 的目的就是在这里。</p>
<p>Configure() 主要是定义了中间件（middleware）以及它们的顺序．</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></div><div class="line">&#123;</div><div class="line">    loggerFactory.AddConsole(Configuration.GetSection(<span class="string">"Logging"</span>));</div><div class="line">    loggerFactory.AddDebug();</div><div class="line"></div><div class="line">    app.UseStaticFiles();</div><div class="line"></div><div class="line">    app.UseMvcWithDefaultRoute();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4、Build-和-Run"><a href="#4、Build-和-Run" class="headerlink" title="4、Build 和 Run"></a>4、Build 和 Run</h3><p>最后，在IHostWebBuilder里最后的两个动作便是：Build and Run. </p>
<h3 id="Build"><a href="#Build" class="headerlink" title="Build()"></a>Build()</h3><ul>
<li>这个方法做的工作便是建立 hosting service，把 Startup 中定义的的 services 和 middleware 接收过来，然后确定content root path 和 application name，接着一句前面这些资料再加上Configuration过来的数据来初始化host engine (WebHost.cs)．</li>
</ul>
<h3 id="Run"><a href="#Run" class="headerlink" title="Run()"></a>Run()</h3><ul>
<li>这个是启动 host engine 的 扩展方法，它在启动之前加入了一个 CancelKeyPress 的事件．因为在 Run() 方法 中传入入了 CancellationTokenSource() ，让我们有一个方法可以随时中断host engine的执行。</li>
</ul>
<p>目前的做法就用是 CancelKeyPress 事件，所以你可以按下 Ctrl+C  來中止 host engine 的执行．</p>
<p>比较特別的是，这一段中止的文字说明居然是用 hard code，參考如下:</p>
<p>host.Run(cts.Token, “Application started. Press Ctrl+C to shut down.”);</p>
<p>不过这样的话，这里你也不能写中文…</p>
<p>本文整理于<a href="https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327" target="_blank" rel="external">https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327</a>并已征得作者同意。<br>感谢Bruce的分享。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前版本的ASP.NET程序必须依赖IIS来启动，而IIS上会为挂载在其中的ASP.NET 注册一个ISAPI filter。每当http请求过来时，IIS则会启动w3wp的worker process来开始整个ASP.NET runtime程序。相信大家都这样的流程都有相
    
    </summary>
    
      <category term=".net core" scheme="http://codelover.link/categories/net-core/"/>
    
    
  </entry>
  
  <entry>
    <title>避免在函数或者操作中抛出异常</title>
    <link href="http://codelover.link/2016/06/20/don%E2%80%99t-throw-exception-in-foreach/"/>
    <id>http://codelover.link/2016/06/20/don’t-throw-exception-in-foreach/</id>
    <published>2016-06-19T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h2><p>如某个场景下，你的函数或操作需要操作一个序列的对象，且在处理的过程中抛出了异常。这时如果没有一些状态记录之类的数据，我们不了解已经处理了多少的数据，也不知道应该采用怎么样的策略回滚，因此根本无法返回到之前的状态。<br>我们看一下下面的一个代码：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> allEmp = FindAllEmployees();</div><div class="line">allEmp.ForEach(e =&gt; e.MonthlySalary *=<span class="number">1.05</span>M);</div></pre></td></tr></table></figure></p>
<p>这样的代码看起来没什么问题。可是某一天，这个程序运行时抛出了异常。抛出异常的位置可能未知，导致部分员工得到了加薪，另外的一些员工却没有。结果是除了人工检查数据，我们已经没有办法重新找回丢失的状态。</p>
<p>这样的代码修改元素的方式导致发生了上面的问题。这段代码并没有遵循“强异常安全保证”规则。换而言之，在运行时遇到错误，我们无法得知具体发生了什么，没有发生什么。</p>
<h3 id="原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。"><a href="#原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。" class="headerlink" title="原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。"></a>原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。</h3><p>我们有几种方法都可以实现这样的需求，但是每种方法都有各自的优势和风险。</p>
<h2 id="2、在函数-操作中抛出异常"><a href="#2、在函数-操作中抛出异常" class="headerlink" title="2、在函数/操作中抛出异常"></a>2、在函数/操作中抛出异常</h2><p>显而易见的，不是所有的方法都会遇到这样的问题（异常导致状态丢失）。很多时候我们只是检查了一下序列中的元素，访问之后并不会修改其中的元素。这类的行为我们其实并不需要太过于小心。现在我们回到最开始的地方，对于上面的场景（为每位员工加薪百分之五），如果我们想遵循“强异常安全保证”原则，那应该如何修改这个方法呢？</p>
<h4 id="第一种异常：获取数据的时候异常"><a href="#第一种异常：获取数据的时候异常" class="headerlink" title="第一种异常：获取数据的时候异常"></a>第一种异常：获取数据的时候异常</h4><p>在上面的例子中，即使FindAllEmployees()函数抛出异常，导致我们无法正确让员工加薪。虽然这样的情况并不是导致我们的数据产生问题，但是该加薪的大家没有得到加薪，这是一个多么沮丧的事情呢。</p>
<h4 id="解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees-方法），让其永远不会抛出异常。"><a href="#解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees-方法），让其永远不会抛出异常。" class="headerlink" title="解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。"></a>解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。</h4><p>很多时候，我们在开始修改数据之前，先校验数据的合法性以及剔除错误数据（如果允许剔除的话）并不是非常困难。我们是可以采取这样的方法来实现我们的目的。不过在这里的话，我们就必须严格处理操作方法，使得它能满足所有情况下的需求。</p>
<h4 id="第二种异常：lambda表达式中操作数据异常"><a href="#第二种异常：lambda表达式中操作数据异常" class="headerlink" title="第二种异常：lambda表达式中操作数据异常"></a>第二种异常：lambda表达式中操作数据异常</h4><p>同样是上面的例子，如果我们在执行加薪操作的时候，提升了那些已经离职的员工薪资导致了异常，使得程序中断，状态丢失。这样的情况，我们在执行加薪操作前先过滤掉已离职的员工便是一种正确的做法。</p>
<h4 id="解决方法：操作数据前通过校验过滤后再执行操作"><a href="#解决方法：操作数据前通过校验过滤后再执行操作" class="headerlink" title="解决方法：操作数据前通过校验过滤后再执行操作"></a>解决方法：操作数据前通过校验过滤后再执行操作</h4><p>如：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">allEmp.Where(emp=&gt;emp.Active).ForEach(e =&gt; e.MonthlySalary *=<span class="number">1.05</span>M);</div></pre></td></tr></table></figure></p>
<h4 id="第三种异常：执行操作的时候抛出异常"><a href="#第三种异常：执行操作的时候抛出异常" class="headerlink" title="第三种异常：执行操作的时候抛出异常"></a>第三种异常：执行操作的时候抛出异常</h4><p>有时候，我们根本无法保证处理方法的时候会不会抛出异常。这个时候就必须采取一些代价更加昂贵的处理方法了。</p>
<h4 id="解决方法：创建副本尝试执行操作，副本无误后执行真正操作"><a href="#解决方法：创建副本尝试执行操作，副本无误后执行真正操作" class="headerlink" title="解决方法：创建副本尝试执行操作，副本无误后执行真正操作"></a>解决方法：创建副本尝试执行操作，副本无误后执行真正操作</h4><p>我们在编写这类代码的时候，应该考虑抛出异常之后的处理方案。这就意味着，我们的操作应该先在原数据副本上执行，随后仅在操作成功之后再将其替换原有的数据。<br>如:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> updatas = (<span class="keyword">from</span> e <span class="keyword">in</span> allEmp </div><div class="line">              <span class="keyword">select</span> <span class="keyword">new</span> Emp</div><div class="line">              &#123;</div><div class="line">                  EmpID=e.EmpID,</div><div class="line">                  .....</div><div class="line">                  MonthlySalary =e.MonthlySalary *=<span class="number">1.05</span>M</div><div class="line">              &#125;).ToList();</div><div class="line"></div><div class="line">allEmp = updatas;</div></pre></td></tr></table></figure>
<p>但是这样的修改也引发了其他的问题：代码量增加了，同时生成副本也消耗了大量的资源。这样的做法也有一个好处，我们在操作副本数据时遇到异常之后，有充分的”空间”来处理这些数据。</p>
<p>实际中，这意味着我们让查询表达式返回了新序列，而不是去修改原先序列中的元素。这样的话，我们在尝试完成所有的操作的同时，即使失败了，也不会影响到我们程序的原有状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、引言&quot;&gt;&lt;a href=&quot;#1、引言&quot; class=&quot;headerlink&quot; title=&quot;1、引言&quot;&gt;&lt;/a&gt;1、引言&lt;/h2&gt;&lt;p&gt;如某个场景下，你的函数或操作需要操作一个序列的对象，且在处理的过程中抛出了异常。这时如果没有一些状态记录之类的数据，我们不了
    
    </summary>
    
      <category term=".net" scheme="http://codelover.link/categories/net/"/>
    
    
  </entry>
  
  <entry>
    <title>ASP.NET core 初体验</title>
    <link href="http://codelover.link/2016/05/30/the_first_aspnetcore/"/>
    <id>http://codelover.link/2016/05/30/the_first_aspnetcore/</id>
    <published>2016-05-29T16:00:00.000Z</published>
    <updated>2016-10-15T07:14:38.318Z</updated>
    
    <content type="html"><![CDATA[<p>在大神的带领下体验了一下asp.net core，感觉很不错，简单写个手把手教程。</p>
<p>环境要求：VS2015 update2，版本不限。</p>
<p>首先到这里：<a href="https://www.microsoft.com/net/download" target="_blank" rel="external">https://www.microsoft.com/net/download</a></p>
<p>下载.NET Core Install 和SDK Install。</p>
<p>如下图：<br><img src="http://7xread.com1.z0.glb.clouddn.com/5f4576e6-6fa0-4fbb-83c9-009428480e83" alt="图一"></p>
<p>接着无脑安装。<br><img src="http://7xread.com1.z0.glb.clouddn.com/a996d00e-5aa5-4034-96ae-548e35c2ba95" alt="图二"></p>
<p>两个都装完之后环境已经搭好了。不过在VS中还没对应的.NET Core模板。<br>我们还需要去下载一个<br><a href="https://go.microsoft.com/fwlink/?LinkId=798481" target="_blank" rel="external">.NET Core Tooling Preview 1 for Visual Studio 2015</a></p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/07ec4ff1-64ea-486b-8cb8-99dc400c279a" alt="图三"></p>
<p>这个安装略慢，稍等。</p>
<p>上面的都安装好了之后，打开VS，新建项目，选中web，即可看到asp.net core.<br>如下图：<br><img src="http://7xread.com1.z0.glb.clouddn.com/aa3a9677-701e-45f0-90ea-b47b57dcb85e" alt="图五"><br>完事….<br>下次再来聊asp.net core项目…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在大神的带领下体验了一下asp.net core，感觉很不错，简单写个手把手教程。&lt;/p&gt;
&lt;p&gt;环境要求：VS2015 update2，版本不限。&lt;/p&gt;
&lt;p&gt;首先到这里：&lt;a href=&quot;https://www.microsoft.com/net/download&quot; 
    
    </summary>
    
      <category term=".net core" scheme="http://codelover.link/categories/net-core/"/>
    
    
  </entry>
  
  <entry>
    <title>CodeSmith 连接MySQL数据库报“can&#39;t find .net framework data provider”</title>
    <link href="http://codelover.link/2016/04/20/CodeSmith-connect-MySQL-throw%E2%80%9Ccan%E2%80%98t%20find%20.Net%20Framework%20Data%20Provider%E2%80%9D%7F/"/>
    <id>http://codelover.link/2016/04/20/CodeSmith-connect-MySQL-throw“can‘t find .Net Framework Data Provider”/</id>
    <published>2016-04-19T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.627Z</updated>
    
    <content type="html"><![CDATA[<p>1、下载 mysql-connector-net 安装</p>
<p><a href="https://dev.mysql.com/downloads/connector/net/6.9.html" target="_blank" rel="external">mysql-connector-net</a></p>
<p>2、mysql-connector-net 安装完毕之后，到对应的安装目录下，把对应的MySQL .NET dll拷贝到 CodeSmith的bin目录和SchemaProviders目录。</p>
<p>一般DLL所在目录是：</p>
<p>C:\Program Files (x86)\MySQL\MySQL Connector Net 6.9.8\Assemblies\v4.0</p>
<p>3、重启CodeSmith生效</p>
<p><br><br><br></p>
<p>其余解决方案：<br><br><br><a href="http://blog.csdn.net/joke01/article/details/9469515" target="_blank" rel="external">codesmith无法连接Mysql的解决方法</a></p>
<p><a href="http://www.cnblogs.com/tim190/archive/2013/01/18/2866161.html" target="_blank" rel="external">codesmith6.5连接Mysql提示“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、下载 mysql-connector-net 安装&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/downloads/connector/net/6.9.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mysql-
    
    </summary>
    
      <category term="CodeSmith" scheme="http://codelover.link/categories/CodeSmith/"/>
    
    
  </entry>
  
  <entry>
    <title>Jexus支持HTTPS协议</title>
    <link href="http://codelover.link/2016/04/20/Jexus-support-HTTPS/"/>
    <id>http://codelover.link/2016/04/20/Jexus-support-HTTPS/</id>
    <published>2016-04-19T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.707Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，在HTTPS页面请求HTTP资料的时候，现代浏览器会拦截，提示用户是否继续，或者直接拦截，提示都不出来。</p>
<p>最近给自己做了个快速书签工具，点击书签就直接把书签发送到服务器地址，然后保存到我的网站中。</p>
<p>一开始一切都挺正常的，不过遇到了https的网站的时候，就跪掉了。</p>
<p>开始的时候看到HTTPS证书是收费的，想想还是算了，反正凑合能用就是。前几天偶尔看到有一个免费申请HTTPS的开源软件，喵了一下看起来还不错，这几天有空了立马开干。下面有一个教程，我申请证书差不多就是按照这个来处理的。</p>
<p><a href="https://www.paulyang.cn/blog/archives/39?spm=5176.blog2666.yqblogcon1.12.Nu0TgL" target="_blank" rel="external">用Let’s Encrypt获取免费证书</a></p>
<p>关于这个Let’s Encrypt，维基百科是这样介绍的：</p>
<blockquote>
<p>Let’s Encrypt 是一个将于2015年末推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。  Let’s Encrypt 是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。用以实现这一新的数字证书认证机构的协议被称为自动证书管理环境（ACME）。  GitHub上有这一规范的草案，且提案的一个版本已作为一个Internet草案发布。Let’s Encrypt 宣称这一过程将十分简单、自动化并且免费。  2015年8月7日，该服务更新其推出计划，预计将在2015年9月7日当周某时发布首个证书，随后向列入白名单的域名发行少量证书并逐渐扩大发行。若一切按计划进行，该服务预计将在2015年11月16日当周某时全面开始提供.</p>
</blockquote>
<p>整个项目在Github有代码，主要是通过客户端来为我们的网站生成https证书。<br>首先我们先下载客户端，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/letsencrypt/letsencrypt.git</div></pre></td></tr></table></figure></p>
<p>接着进入这个仓库内，执行下面代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./letsencrypt-auto certonly -a </div><div class="line">webroot\ --webroot-path 网站所在路径(如：/var/www/web/) \ </div><div class="line">-d 你的域名(如：test.online) -d www.你的域名(如ww.test.online)</div></pre></td></tr></table></figure></p>
<p>这里需要注意的事，我这里为了排版，给上面的命令加了换行，运行这个命令的时候记得把换行符去掉。<br>换行符在webroot、-d 前面各有一个。</p>
<p>一切顺利的话，我们在<code>/etc/letsencrypt/live/域名/</code>这个目录下能看到四个文件，分别是：</p>
<ol>
<li>域名证书文件</li>
<li>签发域名证书的证书链文件</li>
<li>域名证书+证书链文件</li>
<li>私钥文件</li>
</ol>
<p>如下图：<br><img src="http://7xread.com1.z0.glb.clouddn.com/60e4f29a-6da5-40e1-ae32-453a3bbf2455" alt="letsencrypt文件"></p>
<p>接着就是为网站设置证书了。</p>
<p>Jexus设置HTTPS要更改jws.conf文档以及网站的配置文档。</p>
<p>操作步骤如下：</p>
<ol>
<li>修改jws.conf<br>进入Jexus文件夹中，打开 “jws.conf”，添加下面两句：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CertificateFile    = /etc/letsencrypt/live/域名/fullchain.pem</div><div class="line">CertificateKeyFile = /etc/letsencrypt/live/域名/privkey.pem</div></pre></td></tr></table></figure>
<p>修改之后效果图如下：<br><img src="http://7xread.com1.z0.glb.clouddn.com/d306d9c5-6391-421d-86fc-053b97d1b489" alt="图片描述"></p>
<ol>
<li>开启网站的HTTPS功能</li>
</ol>
<p>进入siteconf/文件夹，找到对应的网站conf文件，</p>
<p>把网站服务端口改为443：<br>port=443</p>
<p>启用https：<br>UseHttps=true</p>
<p>修改之后的效果图如下：<br><img src="http://7xread.com1.z0.glb.clouddn.com/0800dc87-2500-42d2-a3c5-a75a2c819330" alt="图片描述"></p>
<p>然后重启jexus即可。</p>
<p>完了之后，通过HTTPS即可访问。</p>
<p>最后上一个HTTPS证书的图证明一下这个是可行的。<br><img src="http://7xread.com1.z0.glb.clouddn.com/24842774-311e-4e55-a6b5-b88a89edc754" alt="图片描述"></p>
<p>撒花，下次再见。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，在HTTPS页面请求HTTP资料的时候，现代浏览器会拦截，提示用户是否继续，或者直接拦截，提示都不出来。&lt;/p&gt;
&lt;p&gt;最近给自己做了个快速书签工具，点击书签就直接把书签发送到服务器地址，然后保存到我的网站中。&lt;/p&gt;
&lt;p&gt;一开始一切都挺正常的，不过遇到了htt
    
    </summary>
    
      <category term="jexus" scheme="http://codelover.link/categories/jexus/"/>
    
    
  </entry>
  
  <entry>
    <title>mono webreques https exception</title>
    <link href="http://codelover.link/2016/04/10/mono-webreques-https-exception/"/>
    <id>http://codelover.link/2016/04/10/mono-webreques-https-exception/</id>
    <published>2016-04-10T04:39:04.000Z</published>
    <updated>2016-10-15T05:20:24.932Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在做一个使用URL通过WebRequest请求HTML页面的功能的时候遇到了点坑，程序在开发环境没有任何的问题，部署到linux mono上之后就跪了。代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetHTML</span>(<span class="params"><span class="keyword">string</span> url</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">string</span> htmlCode;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);</div><div class="line">        webRequest.Timeout = <span class="number">30000</span>;</div><div class="line">        webRequest.Method = <span class="string">"GET"</span>;</div><div class="line">        webRequest.UserAgent = <span class="string">"Mozilla/4.0"</span>;</div><div class="line">        webRequest.Headers.Add(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip, deflate"</span>);</div><div class="line"></div><div class="line">        HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();</div><div class="line">        <span class="comment">//获取目标网站的编码格式</span></div><div class="line">        <span class="keyword">string</span> contentype = webResponse.Headers[<span class="string">"Content-Type"</span>];</div><div class="line">        Regex regex = <span class="keyword">new</span> Regex(<span class="string">"charset\\s*=\\s*[\\W]?\\s*([\\w-]+)"</span>, RegexOptions.IgnoreCase);</div><div class="line">        <span class="keyword">if</span> (webResponse.ContentEncoding.ToLower() == <span class="string">"gzip"</span>)<span class="comment">//如果使用了GZip则先解压</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> zipStream = <span class="keyword">new</span> System.IO.Compression.GZipStream(streamReceive, </div><div class="line">                System.IO.Compression.CompressionMode.Decompress))</div><div class="line">                &#123;</div><div class="line">                    <span class="comment">//匹配编码格式</span></div><div class="line">                    <span class="keyword">if</span> (regex.IsMatch(contentype))</div><div class="line">                    &#123;</div><div class="line">                        Encoding ending = Encoding.GetEncoding(regex.Match(contentype).Groups[<span class="number">1</span>].Value.Trim());</div><div class="line">                        <span class="keyword">using</span> (StreamReader sr = <span class="keyword">new</span> System.IO.StreamReader(zipStream, ending))</div><div class="line">                        &#123;</div><div class="line">                            htmlCode = sr.ReadToEnd();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">using</span> (StreamReader sr = </div><div class="line">                        <span class="keyword">new</span> System.IO.StreamReader(zipStream, Encoding.UTF8))</div><div class="line">                        &#123;</div><div class="line">                            htmlCode = sr.ReadToEnd();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">using</span> (System.IO.StreamReader sr = <span class="keyword">new</span> System.IO.StreamReader(streamReceive, Encoding.Default))</div><div class="line">                &#123;</div><div class="line">                    htmlCode = sr.ReadToEnd();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> htmlCode;</div><div class="line"></div><div class="line">    &#125;<span class="keyword">catch</span>(Exception ex)</div><div class="line">    &#123;</div><div class="line">        LogHelper.WriteException(<span class="string">"GetHTML"</span>, ex, <span class="keyword">new</span> &#123; Url = url &#125;);</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>开发环境在Windows10 + VS2013,整个代码跑起来没什么问题。</p>
<p>无论是HTTP还是HTTPS协议，网页HTML一样能获取得到。</p>
<p>网站部署到linux Jexus之后HTTP协议的网站同样可以获取到HTML，遇到HTTPS协议的网站的时候就跪了。</p>
<p>抓到的异常信息如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">System.Net.WebException: Error: TrustFailure (The authentication or decryption has failed.) </div><div class="line">---&gt; System.IO.IOException: The authentication or decryption has failed.</div><div class="line">---&gt; System.IO.IOException: The authentication or decryption has failed. </div><div class="line">---&gt; Mono.Security.Protocol.Tls.TlsException:</div><div class="line">Invalid certificate received <span class="keyword">from</span> server. Error code: <span class="number">0xffffffff800b0109</span></div><div class="line">at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord </div><div class="line">(IAsyncResult asyncResult) &lt;<span class="number">0x41b58d80</span> + <span class="number">0x0013e</span>&gt; <span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span> </div><div class="line">at Mono.Security.Protocol.Tls.SslClientStream.SafeEndReceiveRecord</div><div class="line">(IAsyncResult ar, Boolean ignoreEmpty) &lt;<span class="number">0x41b58cb0</span> + <span class="number">0x00031</span>&gt; <span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span> </div><div class="line">at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker</div><div class="line">(IAsyncResult result) &lt;<span class="number">0x41b72a40</span> + <span class="number">0x0023f</span>&gt; <span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span> </div><div class="line">--- End of inner exception stack trace ---</div><div class="line">at Mono.Security.Protocol.Tls.SslClientStream.EndNegotiateHandshake </div><div class="line">(IAsyncResult result) &lt;<span class="number">0x41ba07e0</span> + <span class="number">0x000f3</span>&gt; <span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span> </div><div class="line">at Mono.Security.Protocol.Tls.SslStreamBase.AsyncHandshakeCallback </div><div class="line">(IAsyncResult asyncResult) &lt;<span class="number">0x41ba0540</span> + <span class="number">0x00086</span>&gt; <span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span> </div><div class="line">--- End of inner exception stack trace ---</div><div class="line">at Mono.Security.Protocol.Tls.SslStreamBase.EndRead </div><div class="line">(IAsyncResult asyncResult) &lt;<span class="number">0x41b73fd0</span> + <span class="number">0x00199</span>&gt; <span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span> </div><div class="line">at Mono.Net.Security.Private.LegacySslStream.EndAuthenticateAsClient </div><div class="line">(IAsyncResult asyncResult) &lt;<span class="number">0x41b73f30</span> + <span class="number">0x00042</span>&gt; <span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span> </div><div class="line">at Mono.Net.Security.Private.LegacySslStream.AuthenticateAsClient (System.String targetHost, </div><div class="line">System.Security.Cryptography.X509Certificates.X509CertificateCollection</div><div class="line">clientCertificates, SslProtocols enabledSslProtocols,</div><div class="line">Boolean checkCertificateRevocation) &lt;<span class="number">0x41b6a660</span> + <span class="number">0x00055</span>&gt; <span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span> </div><div class="line">at Mono.Net.Security.MonoTlsStream.CreateStream (System.Byte[] buffer) </div><div class="line">&lt;<span class="number">0x41b69c30</span> + <span class="number">0x00159</span>&gt; <span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span> </div><div class="line">--- End of inner exception stack trace ---</div><div class="line">at System.Net.HttpWebRequest.EndGetResponse (IAsyncResult asyncResult) </div><div class="line">&lt;<span class="number">0x41b67660</span> + <span class="number">0x001f9</span>&gt; <span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span> </div><div class="line">at System.Net.HttpWebRequest.GetResponse () &lt;<span class="number">0x41b60920</span> + <span class="number">0x0005a</span>&gt; <span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span> </div><div class="line">at WebBookmarkUI.Commom.HTTPHelper.GetHTML (System.String url) &lt;<span class="number">0x41b59b70</span> + <span class="number">0x00235</span>&gt; </div><div class="line"><span class="keyword">in</span> &lt;filename unknown&gt;:<span class="number">0</span></div></pre></td></tr></table></figure>
<p>有用的信息基本就是：</p>
<ol>
<li>Invalid certificate received from server</li>
<li>The authentication or decryption has failed</li>
</ol>
<p>一开始百思不得其解，为嘛好好的程序在开发环境跑得都好的，到了mono上就挂了，多疑的我还以为是mono的bug。<br>今天静下心来去找了一下资料，发现Mono的文档有这个问题的描述，认真读了一遍，又去请教了一番宇内流云大大，终于弄懂了是什么回事。</p>
<p>先贴一下相关资料：</p>
<ol>
<li><p><a href="http://stackoverflow.com/questions/4926676/mono-webrequest-fails-with-https" target="_blank" rel="external">stackoverflow mono-webrequest-fails-with-https</a></p>
</li>
<li><p><a href="http://www.mono-project.com/docs/faq/security/" target="_blank" rel="external">mono doc security</a></p>
</li>
</ol>
<p>这个问题是出现的原因是Windows自带了HTPPS的根证书，linux默认则是没有带有根证书的。我们的mono在调用WebRequest去请求HTTPS协议的网站的时候，找不到任何有效的根证书，所以抛出上面的异常了。</p>
<p>解决方案也很简单，为linux导入一下HTTPS根证书就好。</p>
<p>在linux服务器上面执行下面这条命令。<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">mozroots</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">import</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ask</span><span class="literal">-</span><span class="comment">remove</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">machine</span></div></pre></td></tr></table></figure></p>
<p>然后在网站的Application_Start()里面添加下面代码：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> System.Net.ServicePointManager.ServerCertificateValidationCallback +=</div><div class="line"> <span class="keyword">delegate</span>(<span class="keyword">object</span> sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,</div><div class="line"> System.Security.Cryptography.X509Certificates.X509Chain chain,</div><div class="line"> System.Net.Security.SslPolicyErrors sslPolicyErrors)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// **** Always accept</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>完事。</p>
<p>这个故事告诉我们，linux干活都是要亲力亲为呀。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天在做一个使用URL通过WebRequest请求HTML页面的功能的时候遇到了点坑，程序在开发环境没有任何的问题，部署到linux mono上之后就跪了。代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
    
    </summary>
    
      <category term=".net" scheme="http://codelover.link/categories/net/"/>
    
    
      <category term="mono" scheme="http://codelover.link/tags/mono/"/>
    
      <category term="webreques exception" scheme="http://codelover.link/tags/webreques-exception/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu使用Jexus搭建MyWebSQL</title>
    <link href="http://codelover.link/2016/04/07/ubuntu-jexus-mywebsql/"/>
    <id>http://codelover.link/2016/04/07/ubuntu-jexus-mywebsql/</id>
    <published>2016-04-06T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:25.009Z</updated>
    
    <content type="html"><![CDATA[<p>之前在阿里云上装了一个ubuntu，后来也没怎么用力，就挂这一个mysql数据库。最近在家里用MySQL Workbench 连接阿里云上面的MySQL的时候，连着过了一会就中断了。后来看了一圈回来才发现，目测是家里电信宽带的锅，不断给我动态分配IP地址….后来群里面的小伙伴说，搭个websql了事啦。听起来不错的想法，于是昨天就试了一下。</p>
<p>之前在ubuntu上装过apache，后来为了跑asp.net，把apache停了，换成了jexus。<br>Jexus是国内.NET 跨平台大牛们写的一个web服务器，使用方便，很稳定，也在不断加入新特性。相关资料直接访问<a href="http://www.jexus.org/" target="_blank" rel="external">www.jexus.org</a>。</p>
<p>jexus是以mono为基础的，其实首先应该先配置mono的运行环境。</p>
<p>###第一步 安装mono<br>相关资料链接：</p>
<p><a href="http://www.linuxdot.net/bbsfile-3090" target="_blank" rel="external">在Ubuntu操作系统上安装mono的具体方法</a></p>
<p><a href="http://www.isvee.com/archives/763" target="_blank" rel="external">Ubuntu 14.04 安装 Mono</a></p>
<p>我的ubuntu老早之前就安装好了mono，这个就此瞥过咯。</p>
<p>###第二步 安装jexus</p>
<p><a href="http://www.linuxdot.net/bbsfile-3084" target="_blank" rel="external">Jexus web server V5.1 安装配置要点</a></p>
<p><a href="http://www.jexus.org/" target="_blank" rel="external">jexus首页</a></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">A、安装：</div><div class="line">cd /tmp</div><div class="line">wget linuxdot.net/down/jexus<span class="number">-5.8</span><span class="number">.1</span>.tar.gz </div><div class="line">tar -zxvf jexus<span class="number">-5.8</span><span class="number">.1</span>.tar.gz </div><div class="line">cd jexus<span class="number">-5.8</span><span class="number">.1</span> </div><div class="line">sudo ./install </div><div class="line"></div><div class="line">B、更新</div><div class="line">cd /tmp</div><div class="line">sudo /usr/jexus/jws stop</div><div class="line">wget linuxdot.net/down/jexus<span class="number">-5.8</span><span class="number">.1</span>.tar.gz</div><div class="line">tar -zxvf jexus<span class="number">-5.8</span><span class="number">.1</span>.tar.gz</div><div class="line">cd jexus<span class="number">-5.8</span><span class="number">.1</span></div><div class="line">sudo ./upgrade</div></pre></td></tr></table></figure>
<p>5.8.1差不多是现在最新版本了。</p>
<p>###第三步 jexus 支持PHP</p>
<p>先在ubuntu上安装一下PHP5-CGI.</p>
<p><a href="http://www.linuxidc.com/Linux/2012-05/60172.htm" target="_blank" rel="external">用 Jexus ASP.NET WEB服务器搭建 PHP 网站的具体方法</a></p>
<p>总结来说就是下面两句：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line"></div><div class="line">sudo apt-<span class="built_in">get</span> install php5-cgi</div></pre></td></tr></table></figure></p>
<p>接着：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>)修改“<span class="regexp">/etc/</span>php.ini”文件:</div><div class="line"></div><div class="line">找到cgi.force_redirect=<span class="number">1</span>一行，把前边的<span class="string">"#"</span>号去掉，把值从<span class="number">1</span>改为<span class="number">0</span>，如：</div><div class="line"></div><div class="line">cgi.force_redirect=<span class="number">0</span></div><div class="line"></div><div class="line"><span class="number">2</span>)修改jws.conf。打开jexus文件夹中的jws.conf，作如下配置：</div><div class="line"></div><div class="line">填写PHP-CGI程序路径和工作进程数。如：“php-fcgi.set=<span class="regexp">/usr/</span>bin/php-cgi,<span class="number">6</span>”。</div><div class="line"></div><div class="line"><span class="number">3</span>)修改网站配置。在需要使用PHP的网站的配置文件中添加:</div><div class="line"></div><div class="line">fastcgi.add=php|<span class="string">socket:</span><span class="regexp">/var/</span>run<span class="regexp">/jexus/</span>phpsvr</div></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/shanyou/p/3369322.html" target="_blank" rel="external">Jexus 支持PHP的三种方式-张善友</a></p>
<p>搞完上面这些，理论上你的jexus已经能跑PHP网站了。</p>
<p>###第四步 安装mywebsql</p>
<p><a href="http://mywebsql.net/" target="_blank" rel="external">mywebsql首页</a></p>
<p>mywebsql跑起来应该是下图的：</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/7d902b94-f132-4041-84fa-78f044f91358" alt="mywebsql效果图"></p>
<p><a href="https://sourceforge.net/projects/mywebsql/files/stable/mywebsql-3.6.zip/download" target="_blank" rel="external">下载地址</a></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /tmp</div><div class="line"></div><div class="line">wget https:<span class="comment">//sourceforge.net/projects/mywebsql/files/stable/mywebsql-3.6.zip</span></div><div class="line"></div><div class="line">cp mywebsql-3.6.<span class="keyword">zip</span> /<span class="keyword">var</span>/www </div><div class="line"></div><div class="line"><span class="keyword">cd</span> /<span class="keyword">var</span>/www</div><div class="line"></div><div class="line">tar -zxvf mywebsql-3.6.<span class="keyword">zip</span></div></pre></td></tr></table></figure>
<p>把mywebsql网站文件弄好之后，就可以去看jexus配置php网站了。</p>
<p>jexus的网站配置文件夹一般路径就是/usr/jexus/siteconf/</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd <span class="regexp">/usr/</span>jexus<span class="regexp">/siteconf/</span></div><div class="line"></div><div class="line">vi mywebSQL <span class="comment">#创建网站配置文件</span></div><div class="line"></div><div class="line">cd .. </div><div class="line"></div><div class="line">.<span class="regexp">/jexus restart</span></div></pre></td></tr></table></figure>
<p>上面的mywebSQL里面就写网站配置了，主要是端口号/运行环境之类的配置。</p>
<p>贴一下我的配置：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#仅供参考</span></div><div class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">####</span></div><div class="line"># Web Site: Default</div><div class="line">###<span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></div><div class="line"></div><div class="line">port=<span class="number">2016</span></div><div class="line">root=/ /var/www/mywebsql</div><div class="line">hosts=*    <span class="comment">#OR your.com,*.your.com</span></div><div class="line">usephp =<span class="literal">true</span></div><div class="line">fastcgi.add=php|socket:/var/run/jexus/phpsvr</div><div class="line"></div><div class="line"><span class="comment"># addr=0.0.0.0</span></div><div class="line"><span class="comment"># CheckQuery=false</span></div><div class="line"><span class="comment"># NoLog=true</span></div><div class="line"><span class="comment"># NoFile=/index.aspx</span></div><div class="line"><span class="comment"># Keep_Alive=false</span></div><div class="line"><span class="comment"># UseGZIP=true</span></div><div class="line"><span class="comment"># UseHttps=true</span></div><div class="line"><span class="comment"># DenyFrom=192.168.0.233, 192.168.1.*, 192.168.2.0/24</span></div><div class="line"><span class="comment"># AllowFrom=192.168.*.*</span></div><div class="line"><span class="comment"># DenyDirs=~/cgi, ~/upfiles</span></div><div class="line"><span class="comment"># indexes=myindex.aspx</span></div><div class="line"><span class="comment"># rewrite=^/.+?\.(asp|php|cgi|pl|sh)$ /index.aspx</span></div><div class="line"></div><div class="line"><span class="comment"># reproxy=/bbs/ http://192.168.1.112/bbs/</span></div><div class="line"></div><div class="line"><span class="comment"># Jexus php fastcgi address is '/var/run/jexus/phpsvr'</span></div><div class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></div><div class="line"><span class="comment"># fastcgi.add=php|socket:/var/run/jexus/phpsvr</span></div><div class="line"></div><div class="line"><span class="comment"># php-fpm listen address is '127.0.0.1:9000'</span></div><div class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">##</span></div><div class="line"><span class="comment"># fastcgi.add=php|tcp:127.0.0.1:9000</span></div></pre></td></tr></table></figure>
<p>到这里，访问<a href="http://你的主机IP:上面配置的端口号" target="_blank" rel="external">http://你的主机IP:上面配置的端口号</a> 就能看到下面的页面了。</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/df3951c0-9d3d-4085-b577-743df68c1d98" alt="MywWebSQL登陆页"></p>
<p>输入账号密码就能登陆。</p>
<p>###然而….<br>我登陆的时候显示，系统提示：没有安装客户端库。</p>
<p>###第五步 配置PHP MySQL库</p>
<p>于是又跑去看了一下MyWebSQL的说明，文档上说可以在/install.php上面看配置。</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/cf8d88d8-fb5d-42f0-81cc-e0fbb566ebe5" alt="这是配置好的效果图"></p>
<p>显示：</p>
<p>MySQL Client Library    client library is not installed<br>MySQL improved functionality    client library is not installed</p>
<p>好吧，PHP MySQL客户端库没有安装….</p>
<p>那就安装咯。<br>于是找到了下面一个文章：<br><a href="http://www.cnblogs.com/CheeseZH/p/4694135.html" target="_blank" rel="external">ZH奶酪：Ubuntu 14.04安装LAMP(Linux，Apache，MySQL，PHP)</a></p>
<p>安装一下基础库<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt php5-curl php5-imagick php5-cli</div></pre></td></tr></table></figure></p>
<p>搜索一下还有什么库可以安装。</p>
<p>apt-cache search php5-</p>
<p><img src="http://7xread.com1.z0.glb.clouddn.com/7bac43bc-01ea-4ce0-ba4b-37a06a51fe3a" alt=""></p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install php5 php5-mysqlnd </div><div class="line"></div><div class="line">sudo apt-get install php5 php5-mysqlnd-ms</div></pre></td></tr></table></figure>
<p>接着重启一下jexus的网站，万事大吉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在阿里云上装了一个ubuntu，后来也没怎么用力，就挂这一个mysql数据库。最近在家里用MySQL Workbench 连接阿里云上面的MySQL的时候，连着过了一会就中断了。后来看了一圈回来才发现，目测是家里电信宽带的锅，不断给我动态分配IP地址….后来群里面的小伙
    
    </summary>
    
      <category term="ubuntu" scheme="http://codelover.link/categories/ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>CodeSmith for MySQL template</title>
    <link href="http://codelover.link/2016/03/28/CodeSmith-to-MySQL/"/>
    <id>http://codelover.link/2016/03/28/CodeSmith-to-MySQL/</id>
    <published>2016-03-27T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.644Z</updated>
    
    <content type="html"><![CDATA[<p>对于.NET平台上的代码生成器来说，codesmith是一个非常好的选择。</p>
<p><br><br>以前在学院实验室用的都是SQL server数据库，老师给的一套codesmith模板用来生成model/DAL/BLL很是方便。<br><br><br>不过后来放弃SQL server 投入MySQL之后，刚开始都是手写SQL，还是很痛苦的。<br><br><br>再后来又去找MySQL codesmith模板,这个对应的资料就不多了。不过最后还是找到了一套不错的，凑合能用。起初也懒，codesmith语法不熟，就没想过去修改一下了。<br><br> 最近又要用到这套东西，于是决定还是去修改一番，更便于使用。</p>
<p>这个文章就主要讲一下修改过程，顺便说一下codesmith的简单语法。</p>
<p>先说一下操作步骤：</p>
<p>把模板的文件夹扔到codesmith模板文件的路径下，接着打开Codesmith，找到刚扔过去的文件夹，选择Main.cst,右键-execute-选择对应的MySQL库-选中表。<br><br>（注：codesmith连接MySQL有问题的话，<br><br>移步这里解决 <a href="http://codelover.link/2016/02/25/CodeSmith%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84%20.Net%20Framework%20Data%20Provider%E3%80%82%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85%E3%80%82%E2%80%9D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">CodeSmith 连接MySQL数据库报“can’t find .net framework data provider”</a></p>
<p>如下图：<br><img src="http://7xrayk.com1.z0.glb.clouddn.com/20160228-1.png" alt="1"></p>
<p>然后点击Generate就能顺利生成model/dal/bll了。</p>
<p>生成代码结构如下：<br><img src="http://7xrayk.com1.z0.glb.clouddn.com/20160228-2.png" alt="2"></p>
<p></p><p>这样操作没什么问题，顺利生成了我们要的model/dal/bll了，然后….我懒嘛。<br>每次都要把表一个个选一次，麻不麻烦啊。然后就想了，能不能改一下模板呢。于是便开始google相关资料了。找到了几个相关文章，参考这就开始改造了。<br>先看看原来的Main.cst里面写了撒。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;%@ CodeTemplate Language=<span class="string">"C#"</span> ResponseEncoding=<span class="string">"UTF-8"</span> </div><div class="line">TargetLanguage=<span class="string">"Text"</span> Src=<span class="string">""</span> Inherits=<span class="string">""</span> Debug=<span class="string">"False"</span> </div><div class="line">Description=<span class="string">"Template description here."</span> </div><div class="line"> Output=<span class="string">"None"</span>%&gt;</div><div class="line">&lt;%@ Register Name=<span class="string">"Models"</span> Template=<span class="string">"DBMad.Models.cst"</span> </div><div class="line">	MergeProperties=<span class="string">"False"</span> ExcludeProperties=<span class="string">""</span> %&gt;	</div><div class="line">&lt;%@ Register Name=<span class="string">"DAL"</span> Template=<span class="string">"DBMad.DAL.cst"</span> </div><div class="line">MergeProperties=<span class="string">"False"</span> ExcludeProperties=<span class="string">""</span> %&gt; </div><div class="line">&lt;%@ Register Name=<span class="string">"BLL"</span> Template=<span class="string">"DBMad.BLL.cst"</span> </div><div class="line">MergeProperties=<span class="string">"False"</span> ExcludeProperties=<span class="string">""</span> %&gt;</div><div class="line"></div><div class="line">&lt;%@ Property Name=<span class="string">"SourceTable"</span> </div><div class="line">Type=<span class="string">"SchemaExplorer.TableSchema"</span> Optional=<span class="string">"False"</span>%&gt;</div><div class="line">&lt;%@ Property Name=<span class="string">"RootNamespace"</span> Default=<span class="string">"Net.Itcast.CN"</span> </div><div class="line">Type=<span class="string">"System.String"</span> Optional=<span class="string">"False"</span>%&gt;</div><div class="line"></div><div class="line">&lt;%@ Assembly Name=<span class="string">"SchemaExplorer"</span> %&gt;</div><div class="line">&lt;%@ Assembly Name=<span class="string">"System.Data"</span> %&gt;</div><div class="line">&lt;%@ Import Namespace=<span class="string">"SchemaExplorer"</span> %&gt;</div><div class="line">&lt;%@ Import Namespace=<span class="string">"System.Data"</span> %&gt;</div><div class="line">&lt;script runat=<span class="string">"template"</span>&gt;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">string</span> _outputDirectory = String.Empty;</div><div class="line">	[Editor(<span class="keyword">typeof</span>(System.Windows.Forms.Design.FolderNameEditor), </div><div class="line">	<span class="keyword">typeof</span>(System.Drawing.Design.UITypeEditor))] </div><div class="line">	[Description(<span class="string">"The directory to output the results to."</span>)]</div><div class="line">	<span class="keyword">public</span> <span class="keyword">string</span> OutputDirectory </div><div class="line">	&#123;</div><div class="line">		<span class="keyword">get</span></div><div class="line">		&#123;		</div><div class="line">			<span class="keyword">return</span> _outputDirectory;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">set</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">value</span> != <span class="literal">null</span> &amp;&amp; !<span class="keyword">value</span>.EndsWith(<span class="string">"\\"</span>))</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">value</span> += <span class="string">"\\"</span>;</div><div class="line">		    &#125;</div><div class="line">			_outputDirectory = <span class="keyword">value</span>;</div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>这一段基本就是在声明选项以及引用命名空间，表现出来的便是我们看到的下图：</p>
<p><img src="http://7xrayk.com1.z0.glb.clouddn.com/20160228-1.png" alt="1"></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%</div><div class="line">    Models model = <span class="keyword">this</span>.Create&lt;Models&gt;();</div><div class="line">	model.ModelsNamespace = <span class="keyword">this</span>.RootNamespace+<span class="string">".Model"</span>;</div><div class="line">	model.TargetTable = <span class="keyword">this</span>.SourceTable;</div><div class="line">	model.RenderToFile(<span class="keyword">this</span>.OutputDirectory+<span class="string">"Model/"</span>+model.GetFileName(),<span class="literal">true</span>);</div><div class="line">	</div><div class="line"></div><div class="line">   DAL dal = <span class="keyword">this</span>.Create&lt;DAL&gt;();</div><div class="line">   dal.TargetTable = <span class="keyword">this</span>.SourceTable;</div><div class="line">   dal.ModelsNamespace = model.ModelsNamespace;</div><div class="line">   dal.DALClassNameSurfix = <span class="string">"DAL"</span>;</div><div class="line">   dal.DALNamespace =<span class="keyword">this</span>.RootNamespace+<span class="string">".DAL"</span>;</div><div class="line">   dal.RenderToFile(<span class="keyword">this</span>.OutputDirectory+<span class="string">"DAL/"</span></div><div class="line">   +dal.GetFileName(),<span class="literal">true</span>);</div><div class="line"></div><div class="line">   BLL bll = <span class="keyword">this</span>.Create&lt;BLL&gt;();</div><div class="line">   bll.ModelsNamespace = model.ModelsNamespace;</div><div class="line">   bll.DALClassNameSurfix = dal.DALClassNameSurfix;</div><div class="line">   bll.DALNamespace = dal.DALNamespace;</div><div class="line">   bll.BLLClassNameSurfix = <span class="string">"BLL"</span>;</div><div class="line">   bll.BLLNamespace = <span class="keyword">this</span>.RootNamespace+<span class="string">".BLL"</span>;</div><div class="line">   bll.TargetTable = <span class="keyword">this</span>.SourceTable;</div><div class="line">   bll.RenderToFile(<span class="keyword">this</span>.OutputDirectory+<span class="string">"BLL/"</span></div><div class="line">   +bll.GetFileName(),<span class="literal">true</span>);</div><div class="line"></div><div class="line">   Response.Write(<span class="string">"ok,see "</span>+<span class="keyword">this</span>.OutputDirectory);</div><div class="line">%&gt;</div></pre></td></tr></table></figure>
<p>这一段就是我们点击Generate之后执行的代码，基本功能就是调用<br>DBMad.Models.cst,DBMad.DAL.cst,DBMad.BLL.cst。<br>因为在上面声明数据源的时候，使用了SchemaExplorer.TableSchema，导致我们选择表的时候不能多选。代码如下：</p>
<p>&lt;%@ Property Name=”SourceTable” Type=”SchemaExplorer.TableSchema” Optional=”False”%&gt;</p>
<p>这样一想，这个Main.cst就是一个可以处理单表的生成模板了，我们只要自己写一个可以多选表的模板，然后循环调用这个模板去生成，不就完事了？</p>
<p>找了一下资料，发现只需要把上面的选项Type改一下，便可以多选表了。</p>
<p>如下：</p>
<p>&lt;%@ Property Name=”SourceTables” Type=”SchemaExplorer.TableSchemaCollection” Default=”” Optional=”False” Category=””%&gt; </p>
<p>整体代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;%@ CodeTemplate Language=<span class="string">"C#"</span> ResponseEncoding=<span class="string">"UTF-8"</span> </div><div class="line">TargetLanguage=<span class="string">"Text"</span> Src=<span class="string">""</span> Inherits=<span class="string">""</span> Debug=<span class="string">"False"</span> </div><div class="line">Description=<span class="string">"Template description here."</span> Output=<span class="string">"None"</span>%&gt;</div><div class="line">&lt;%@ Property Name=<span class="string">"SourceTables"</span> </div><div class="line">Type=<span class="string">"SchemaExplorer.TableSchemaCollection"</span> Default=<span class="string">""</span> </div><div class="line">Optional=<span class="string">"False"</span> Category=<span class="string">""</span>%&gt; </div><div class="line">&lt;%@ Register Name=<span class="string">"SE"</span> Template=<span class="string">"CreatSingleTable.cst"</span> </div><div class="line">MergeProperties=<span class="string">"False"</span> ExcludeProperties=<span class="string">""</span> %&gt; </div><div class="line">&lt;%@ Property Name=<span class="string">"RootNamespace"</span> Default=<span class="string">"Net.Itcast.CN"</span> </div><div class="line">Type=<span class="string">"System.String"</span> Optional=<span class="string">"False"</span>%&gt;</div><div class="line">&lt;%@ Assembly Name=<span class="string">"SchemaExplorer"</span> %&gt; </div><div class="line">&lt;%@ Assembly Name=<span class="string">"System.Data"</span> %&gt;</div><div class="line">&lt;%@ Import Namespace=<span class="string">"SchemaExplorer"</span> %&gt; </div><div class="line">&lt;%@ Import Namespace=<span class="string">"System.Data"</span> %&gt; </div><div class="line">&lt;%@ Import Namespace=<span class="string">"System.Collections"</span> %&gt; </div><div class="line">&lt;script runat=<span class="string">"template"</span>&gt;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">string</span> _outputDirectory = String.Empty;</div><div class="line">	[Editor(<span class="keyword">typeof</span>(System.Windows.Forms.Design.FolderNameEditor), </div><div class="line">	<span class="keyword">typeof</span>(System.Drawing.Design.UITypeEditor))] </div><div class="line">	[Description(<span class="string">"The directory to output the results to."</span>)]</div><div class="line">	<span class="keyword">public</span> <span class="keyword">string</span> OutputDirectory </div><div class="line">	&#123;</div><div class="line">		<span class="keyword">get</span></div><div class="line">		&#123;		</div><div class="line">			<span class="keyword">return</span> _outputDirectory;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">set</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">value</span> != <span class="literal">null</span> &amp;&amp; !<span class="keyword">value</span>.EndsWith(<span class="string">"\\"</span>))</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">value</span> += <span class="string">"\\"</span>;</div><div class="line">		    &#125;</div><div class="line">			_outputDirectory = <span class="keyword">value</span>;</div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;% </div><div class="line"><span class="keyword">foreach</span>(TableSchema ts <span class="keyword">in</span> SourceTables) </div><div class="line">&#123; </div><div class="line">SE s = <span class="keyword">new</span> SE(); </div><div class="line">   s.SourceTable = ts; </div><div class="line">   s.RootNamespace = RootNamespace;</div><div class="line">   s.OutputDirectory = OutputDirectory;</div><div class="line">   s.Render(<span class="keyword">this</span>.Response); </div><div class="line">&#125; </div><div class="line">%&gt; </div><div class="line">&lt;script runat=<span class="string">"template"</span>&gt; </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>前面一部分还是一样的声明，</p>
<p>&lt;%@ Property Name=”SourceTables” Type=”SchemaExplorer.TableSchemaCollection” Default=”” Optional=”False” Category=””%&gt; </p>
<p>这一句把选项类型修改成可多选的（既 集合）。<br>效果如下图：<br><img src="http://7xrayk.com1.z0.glb.clouddn.com/20160228-4.png" alt="3"></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;% </div><div class="line"><span class="keyword">foreach</span>(TableSchema ts <span class="keyword">in</span> SourceTables) </div><div class="line">&#123; </div><div class="line">SE s = <span class="keyword">new</span> SE(); </div><div class="line">   s.SourceTable = ts; </div><div class="line">   s.RootNamespace = RootNamespace;</div><div class="line">   s.OutputDirectory = OutputDirectory;</div><div class="line">   s.Render(<span class="keyword">this</span>.Response); </div><div class="line">&#125; </div><div class="line">%&gt; </div><div class="line">&lt;script runat=<span class="string">"template"</span>&gt; </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>这一段代码便是获取刚得到的表集合，遍历集合然后依次调用之前的单表生成模板。</p>
<p>到这里差不多已经完成了我要的效果，选择多表，实现一次生成所有的表对应的model/dal/bll。</p>
<p>这个效果基本就是我要的了，但是后来又发现，model里面的字段居然没有注释，我在建表的时候写了字段注释的呀。</p>
<p>打开model的cst文件之后发现，模板并没有做注释这个工作。<br>代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;%@ CodeTemplate Language="C#" TargetLanguage="C#" </div><div class="line">Src="ToolsCodeTemplate.cs" Inherits="ToolsCodeTemplate"%&gt;</div><div class="line">&lt;%@ Property Name="TargetTable" Type="SchemaExplorer.TableSchema" </div><div class="line">Category="Context" Description="TargetTable that the object is </div><div class="line">based on." %&gt;</div><div class="line">&lt;%@ Property Name="ModelsNamespace" Default="Model" </div><div class="line">Type="System.String" Category="Context" Description="TargetTable </div><div class="line">that the object is based on." %&gt;</div><div class="line">&lt;%@ Assembly Name="SchemaExplorer" %&gt;</div><div class="line">&lt;%@ Assembly Name="System.Data" %&gt;</div><div class="line">&lt;%@ Import Namespace="SchemaExplorer" %&gt;</div><div class="line">&lt;%@ Import Namespace="System.Data" %&gt;</div><div class="line">&lt;% PrintHeader(); %&gt;</div><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Text;</div><div class="line"></div><div class="line">namespace &lt;%= ModelsNamespace %&gt;</div><div class="line">&#123;	</div><div class="line">	[Serializable()]</div><div class="line">	public class &lt;%= GetModelClassName() %&gt;</div><div class="line">	&#123;</div><div class="line">	    &lt;% </div><div class="line">		foreach (ColumnSchema column in TargetTable.Columns)</div><div class="line">	   &#123;</div><div class="line">		%&gt;</div><div class="line">			private &lt;%= GetPropertyType(column) %&gt;  _&lt;%= </div><div class="line">			GetPropertyName(column) %&gt;;			</div><div class="line">		&lt;%</div><div class="line">		&#125;</div><div class="line">		%&gt;</div><div class="line">	    </div><div class="line">		&lt;% </div><div class="line">		foreach (ColumnSchema column in TargetTable.Columns)</div><div class="line">		&#123;</div><div class="line">		%&gt;</div><div class="line">			public &lt;%= GetPropertyType(column) %&gt; &lt;%= </div><div class="line">			GetPropertyName(column) %&gt;</div><div class="line">			&#123;</div><div class="line">				 get &#123; return _&lt;%= GetPropertyName(column) %&gt;; &#125;</div><div class="line">	             set &#123; _&lt;%= GetPropertyName(column) %&gt; = value; &#125;</div><div class="line">			&#125;</div><div class="line">		&lt;%</div><div class="line">		&#125;</div><div class="line">		%&gt;	</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">&lt;script runat="template"&gt;</div><div class="line">public string GetModelClassName()</div><div class="line">&#123;</div><div class="line">	return GetModelClassName(TargetTable);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public override string GetFileName()</div><div class="line">&#123;</div><div class="line">	return this.GetModelClassName(this.TargetTable) + ".cs";</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>获取表中字段名使用的是GetPropertyName(column)，咦，在哪实现了这个东西呢？回去翻一下文件，哦，还有一个ToolsCodeTemplate.cs文一直没管呢。</p>
<p>果然，GetPropertyName(column)在这里。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetPropertyName</span>(<span class="params">ColumnSchema column</span>)</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">return</span> GetNameFromDBFieldName(column);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetNameFromDBFieldName</span>(<span class="params">ColumnSchema column</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> column.Name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>读取列名就是这么简单，那么我们对应写一个函数读取一下列注释，然后再model里面调用一下不好了。</p>
<p>又查了一下资料，</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetColumnComment</span>(<span class="params">ColumnSchema column</span>)</span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">return</span> column.Description;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>嗯，理论上这样是可以的…<br>然而，我想多了。倒腾了好久，这个属性值都是空的…<br>google了一圈之后发现，原来是SchemaExplorer.MySQLSchemaProvider.dll 里面压根没实现读取列注释的实现….</p>
<p>不过也有对应的解决方法：</p>
<p><a href="http://www.cnblogs.com/LonelyShadow/p/4147743.html" target="_blank" rel="external">完美解决CodeSmith无法获取MySQL表及列Description说明注释的方案</a></p>
<p>把DLL替换一下就好了。</p>
<p>最后附上模板连接:<a href="https://github.com/liguobao/CodeSmith-for-MySQL-Template" target="_blank" rel="external">CodeSmith-for-MySQL-Template</a></p>
<p>注：</p>
<ol>
<li>模板会把MySQL的表名前三个字符截取掉，建议把表明设置为tbl开头，或者自行修改模板文件。</li>
<li>想让字段注释生效记得替换SchemaExplorer.MySQLSchemaProvider.dll(替换前记得备份！)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于.NET平台上的代码生成器来说，codesmith是一个非常好的选择。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;以前在学院实验室用的都是SQL server数据库，老师给的一套codesmith模板用来生成model/DAL/BLL很是方便。&lt;br&gt;&lt;br&gt;&lt;br&gt;不过后来放弃S
    
    </summary>
    
      <category term="CodeSmith" scheme="http://codelover.link/categories/CodeSmith/"/>
    
    
      <category term="codesmith" scheme="http://codelover.link/tags/codesmith/"/>
    
  </entry>
  
  <entry>
    <title>C#.NET托管堆和垃圾回收</title>
    <link href="http://codelover.link/2016/03/25/GC-1/"/>
    <id>http://codelover.link/2016/03/25/GC-1/</id>
    <published>2016-03-24T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.657Z</updated>
    
    <content type="html"><![CDATA[<p>###托管堆基础<br> 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接…..事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。</p>
<p> 以下是访问一个资源所需步骤：</p>
<ol>
<li>调用IL指令newobj，为代表资源的类型分配内存。(C# new操作符)</li>
<li>初始化内存，设置资源的初始状态。（一般指构造函数）</li>
<li>访问类型的成员来使用资源。（使用成员变量、方法、属性等）</li>
<li>摧毁资源的状态以进行清除。（Dispose？？？）</li>
<li>释放内存。（GC） </li>
</ol>
<p>###从托管堆分配资源</p>
<p>CLR要求所有的对象都从托管堆分配。<br>进程初始化，CLR划出一个地址空间区域作为托管堆。CLR还要维护一个指针，姑且叫NextObjPtr，该指针指向下一个对象在堆中的分配位置。刚开始的时候， NextObjPtr 设为地址空间区域的基地址。<br>一个区域被非垃圾对象填满后，CLR会分配更多的区域。</p>
<p>这一个过程一直重复，直至整个进程地址空间被填满。所以，应用程序内存收进程的虚拟地址空间的限制。</p>
<p>32位进程最多能分配1.5GB，64位进程最多能分配8T。<br>注：进程内存大小的相关资料</p>
<p><a href="https://msdn.microsoft.com/zh-cn/library/windows/hardware/Dn613959(v=vs.85" target="_blank" rel="external">Memory Support and Windows Operating Systems</a>.aspx)</p>
<p><a href="https://msdn.microsoft.com/zh-cn/library/ms189334.aspx" target="_blank" rel="external">进程地址空间</a></p>
<p><a href="http://blog.csdn.net/yusiguyuan/article/details/12405799" target="_blank" rel="external"> 32位模式下C/C++程序可用最大内存</a></p>
<p>###C# 的new操作符导致CLR执行以下操作：</p>
<p>1、计算类型的字段（以及从基类型继承的字段）所需要的字节数。</p>
<p>2、加上对象的开销所需的字节数。每个对象都有两个开销字段：类型对象指针和同步块索引。对于32位应用程序，这两个字段各需要32位，所以每个对象需要增加8字节。对于64位应用程序，这两个字段各需要64位，所以每个对象要增加16字节。</p>
<p>3、CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在NetxObjPtr指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递NextObjPtr），new操作符返回对象引用。就在返回这个对象引用之前，NextObjPtr指针的值会加上这个对象占用的字节数来得到一个新值，即下个对象放入托管堆时的地址。如下图：</p>
<p><img src="http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/i3rlSCPAcnT9pL0El0BptPIBpuvnxHpBw9Nkp*UqIjw!/o/dJMAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=LwKNAC8CjQADACU!&amp;su=1199793361&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>###垃圾回收算法</p>
<p>####CLR使用引用跟踪算法。<br>引用跟踪算法只关心引用类型的变量，因为只有这种变量才能引用堆上面的对象；<br>值类型变量直接包含值类型实例。引用类型变量可在许多场合使用，包括类的静态和实例字段，或者方法的参数和局部变量。这里我们将所有引用类型的变量都称为根。<br>CLR开始GC时，首先暂停所有的线程。(这样可以防止线程在CLR检查期间访问对象并更改其状态。) 然后CLR进入GC标记阶段。在这个阶段，CLR遍历堆中的所有对象，将同步块索引字段中的一位设为0。这表明所有的对象都应删除。然后，CLR检查所有的活动根，查看他们引用了哪些对象。这正是CLR的GC被称作引用跟踪GC的原因。如果一个根包含null，CLR忽略这个根并继续检查下一个根。<br>下图展示一个堆，其中包含几个对象。<br><img src="http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/eVBVeXGrNAfoWfyRgl4aC2RRSGgiDpmbrocv4lTSJMA!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gAIFAYACBQEDACU!&amp;su=1176931729&amp;sce=0-12-12&amp;rf=2-9" alt="图片1"></p>
<p>应用程序的根直接引用对象A 、C、D 、F。所有的对象都已经被标记。标记对象D时，GC发现这个对象含有一个引用对象H的字段，造成对象H也被标记。标记过程会持续，直至应用程序的所有根所有检查完毕。<br>检查完毕后，堆中的对象要么已标记，要么未标记。已标记的对象不能被垃圾回收，因为至少有一个根在引用它。我们说这种对象是可达的，因为应用程序可以通过引用它的变量抵达它。 未标记的对象是不可达的，因为应用程序中不存在使对象能被再次访问的根。</p>
<p>CLR知道哪些对象可以幸存，哪些可以被删除后，进入GC的压缩（类似于碎片整理）阶段。在压缩阶段，CLR对堆中已标记的对象进行“乾坤大挪移”，整理所有幸存下来的对象，使他们占用连续的内存。</p>
<p>这样做的好处在于：</p>
<p>1、所有幸存对象在内存中紧挨在一起，恢复了引用的“局部性”，减少了应用程序的工作集，从而提升了将来访问这些对象时的性能；</p>
<p>2、经过整理后，可用空间也是连续的，整个地址空间区段得到了解放，允许其他东西进驻。</p>
<p>在内存中移动了对象之后有一个问题亟待解决。引用幸存对象的根现在引用的还是对象最初在内存中的位置，而非移动后的位置。被暂停的线程恢复执行时，将访问旧的内存位置，会造成内存损坏。 这显然是不能容忍的，所以作为压缩阶段的一部分，CLR还要从每个根减去所引用对象在内存中偏移的字节数。这样就能保证每个根还是引用和之前一样的对象，只是对象在内存中变换了位置。<br>如图：<br><img src="http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/FyP2yk1O6kMsq3.u4e4x3qrAxpwbajgSHOd4QHTJOhE!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=TQI*AU0CPwEDACU!&amp;su=1202148209&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>##代：提升性能 (待续)<br>CLR的GC是基于代的垃圾回收器，它对你的代码做出了以下几点假设：</p>
<p>1、对象越新，生存周期越短。</p>
<p>2、对象越老，生存周期越长。</p>
<p>3、回收堆的一部分 ，速度快于回收整个堆。</p>
<p>大量研究表明，这些假设对于现今大多数的应用程序都是成立的，它们影响了垃圾回收器的实现方式。这里将解释代的工作原理。</p>
<p>托管堆在初始化时不包括对象。添加到堆的对象成为第0代对象。简单来说，第0代对象就是那些新构造的对象，垃圾回收器从未检查过它们。如下图，新启动的应用程序，分配了5个对象（从A到E）。过了一会，C和E变得不可达了。</p>
<p><img src="http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/77WJus7lssJpEJ2RZREQoNx.5CL31HLdboJbAgCqS0E!/o/dJMAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=tQIVAbUCFQEDACU!&amp;su=172682065&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>CLR初始化第0代对象选择一个预算容量。如果分配一个新对象造成第0代超预算，就必须启动一次GC。假设对象A到E刚好用完了第0代的空间，那么分配对象F就必须启动GC。GC之后存活的对象现场成为第1代对象。如下图：</p>
<p><img src="http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/GEDzaV4pNFNQUuDwl2EQrv*eD9Sk9OJCzx5SpRRI2fk!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=OAL5ADgC.QADACU!&amp;su=1155276897&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>一次GC之后，第0代就不包含任何对象。和前面一样，新对象会分配到第0代。新分配对象F到对象K都到了第0代。<br><img src="http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Op0QokzBTNYCFR6zzm2tpc2V7U70IsIJTeWrd0UAUb0!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=yAJeAcgCXgEDACU!&amp;su=1124261217&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>之后，程序继续运行，B、H、J变得不可达，它们的内存将在某一个时刻回收。</p>
<p>假设现在新分配对象L会造成第0代超出预算,造成必须启动垃圾回收。</p>
<p>开始垃圾回收时,垃圾回收器必须决定检查哪些代。前面说过,CLR初始化时会为第0代对象选择预算.事实上,它还必须为第1代选择预算.</p>
<p>开始一次垃圾回收时,垃圾回收器还会检查第一代占用了多少内存。在本例中,由于第1代占用内存远少于预算,所以垃圾回收器只检查第0代对象。回顾之前基于代的垃圾回收器做出的第一个假设：对象越新，生存期越短。 因此，第0代包含更多的垃圾的可能性更大，能回收更多的内存。由于忽略第1代中的对象，所以加快了垃圾回收速度。</p>
<p>显然，忽略第1代中的对象能提升垃圾回收器的性能。但对性能有更大提振作用的是现在不必遍历托管堆中的每个对象。如果根或对象引用了老一代的某个对象，垃圾回收器就可以忽略老对象内部的所有引用，能在更短的时间内构造好可达对象图。当然，如果老对象的字段也可能引用新对象。为了确保对老对象的已更新字段进行检查，垃圾回收器利用了JIT编译器内部的一个机制。这个机制在对象的引用字段发生变化时，会设置一个对应的标志位。这样，垃圾回收器就知道自上一次垃圾回收以来，哪些老对象（如果有的话）已被写入。只有字段发生变化的老对象才需要检查是否引用了第0代中的任何新对象。</p>
<p>基于代的垃圾回收器还假设越老的对象活得越长。也就是说，第1代对象在应用程序中有可能是继续可达的。如果垃圾回收器检查第1代的对象，很有可能找不到多少垃圾，结果是也回收不了多少内存。因此，对第1代进行垃圾回收很可能是浪费时间的。如果第一代真有垃圾，垃圾将留在那里。如下图：<br><img src="http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Do.yRCBJEnaOfZaUOdxj4II9*pX2BEcX2QmIG6NQPBE!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=qAI5AagCOQEDACU!&amp;su=187009937&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>程序继续运行，继续往第0代分配对象，同时程序停止对第1代某对象的使用。</p>
<p>如下图：<br><img src="http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/YEqIM16xFsSgXdvEzgrerLnKw7fEItnrSqEzlaYnUfE!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=egJPAXoCTwEDACU!&amp;su=1118118497&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>分配对象P导致第0代超预算，开始GC。第1代的所有对象占据内存仍小于预算，垃圾回收器再次决定只回收第0代。忽略第1代中的垃圾对象。如下图：<br><img src="http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/EcdSNU5AatqRERWtVdlJ7LiIPHHXe8.mklN.0hHDK9U!/o/dJQAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=aAIxAWgCMQEDACU!&amp;su=1214124305&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>程序继续运行，假设第一代的增长导致它的全部对象占用了全部预算。这时候应用程序分配对象P到对象S，使第0代对象达到它的预算总和。如下图：<br><img src="http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/6dB68RIUYrqMZ4p0VIY3REJZPg.g3ybkZFIazJ3h.CQ!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=jwIiAY8CIgEDACU!&amp;su=177976657&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>这时候，应用程序准备分配对象T，由于第一代已满，所以必须开始GC。但这一次垃圾回收器发现第一代占用了太多内存，以至于用完了预算。由于前几次对第0代进行GC时，第1代中可能已经有很多对象变得不可达。所以这次垃圾回收器决定检查第1代和第0代中的所有对象。两代都被垃圾回收后，堆的情况如下图：<br><img src="http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/bxdZDsZi2Y6FSDWs7RXNPkkJK8dCzMD.cfnjwNY2Mjs!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=tgI2AbYCNgEDACU!&amp;su=197762641&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>托管堆只支持三代：第0代、第1代和第2代。</p>
<p>CLR初始化时，会为每一代选择预算。</p>
<p>然而，CLR的垃圾回收是自调节的。</p>
<p>这意味着垃圾回收器会在执行垃圾回收的过程了解程序的行为。</p>
<p>例如：假设应用程序构造了许多对象，但每个对象的时间都很短。<br>在这种情况下，对第0代的垃圾回收会回收到大量的内存。事实上，第0代的所有对象都可能被回收。</p>
<p>如果垃圾回收器发现在回收第0代后存活下来的对象很少，就可能减少第0代的预算。已分配空间的减少意味着垃圾回收将更频繁地发生，但垃圾回收器每次做的事情也减少，这减少了进程的工作集。</p>
<p>另一方面，如果垃圾回收器回收了第0代，发现还有很多对象存活，没多少内存可以被回收，就会增大第0代的预算。</p>
<p>同样的启发性算法调整预算适用于了第1代和第2代的预算。</p>
<p>引自：《CLR VIA C# -21章》</p>
<p><a href="https://msdn.microsoft.com/zh-cn/library/vstudio/f144e03t(v=vs.100" target="_blank" rel="external">自动内存管理</a>.aspx)</p>
<p><a href="https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100" target="_blank" rel="external">垃圾回收的基础</a>.aspx)</p>
<p><a href="https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100" target="_blank" rel="external">代数</a>.aspx#generations )</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###托管堆基础&lt;br&gt; 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接…..事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。&lt;/p&gt;
&lt;p&gt; 以下是访问一个资源所需步骤：&lt;/
    
    </summary>
    
      <category term="GC" scheme="http://codelover.link/categories/GC/"/>
    
    
  </entry>
  
  <entry>
    <title>C#.NET托管堆和垃圾回收(续)</title>
    <link href="http://codelover.link/2016/03/20/GC-2/"/>
    <id>http://codelover.link/2016/03/20/GC-2/</id>
    <published>2016-03-19T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.678Z</updated>
    
    <content type="html"><![CDATA[<p>##大对象<br> CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。</p>
<ol>
<li><p>大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。</p>
</li>
<li><p>目前版本的GC不“压缩”大对象，因为在内存中移动它们代价过高。但这可能在进程中的大对象之间造成地址空间碎片化，以至于抛出OutMemoryException。CLR将来的版本可能会压缩大对象。</p>
</li>
<li>大对象总是第2代，绝不可能是第0代或者第1代。所以只能为需要长时间存活的资源创建大对象。分配短时间存活的大对象会导致第2代被更频繁地回收，损失性能。大对象一般是大字符串（XML/JSON）或者用于I/O操作的字节数组（从文件/网络将字节读入缓冲区以便处理）。</li>
</ol>
<p>##垃圾回收模式<br> CLR启动时会选择一个GC模式，进程中之前该模式都不会改变。</p>
<p> 有两个基本GC模式。</p>
<p>###工作站<br>该模式针对客户端应用程序优化GC。GC造成的延时很低，应用程序线程挂起时间很短，避免用户感到焦虑。在该模式中,GC假定机器上运行的其他应用程序都不会消耗太多的CPU资源。</p>
<p>###服务器<br> 该模式针对服务器端应用程序优化GC。被优化的主要是吞吐量和资源利用。GC假定机器上没有运行其他应用程序（无论客户端还是服务器应用程序），并假定机器的所有CPU都可以用来辅助完成GC。该模式造成托管堆被拆分成几个区域，每个CPU一个。开始垃圾回收时，垃圾回收器在每个CPU上运行一个特殊线程；每个线程都和其他线程并发回收它自己的区域。对于工作者线程行为一致的服务器应用程序，并发回收能很好进行。这个功能要求应用程序在多CPU计算机上运行，是线程能真正同时工作，从而得到性能上的提升。</p>
<p>应用程序默认以“工作站”GC模式运行。寄宿了CLR的服务器应用程序（如ASP.NET ）可请求CLR加载服务器 GC.但如果应用程序在单处理器计算机上运行，CLR总是使用“工作站”GC模式。</p>
<p>独立应用程序可以创建一个配置文件告诉CLR 使用CLR使用服务器回收器。配置文件要为应用程序添加gcServer元素。下面是一个示例配置文件：</p>
<p><configuration><br>       <runtime><br>             <gcserver enabled="true"><br>      </gcserver></runtime><br></configuration><br>可以使用GCSettings类的只读Boolean属性IsServerGC得到CLR是否处于“服务器”GC模式。</p>
<p>除了这两种模式，GC还支持两种子模式：并发(默认)或者非并发。<br>在并发方式中，垃圾回收器有一个额外的后台线程，它能在应用程序运行时并发标记对象。 程序运行时，垃圾回收器运行一个普通优先级的后台线程来查找不可达对象。找到之后，垃圾回收器再次挂起所以线程，判断是否要“压缩”内存。如决定压缩，内存会被压缩，根引用会被修正，应用程序线程恢复运行。这一次垃圾回收花费的时间比平常少，因为不可达对象集合已构造好了。但垃圾回收器也可能决定不压缩内存；事实上，垃圾回收器更倾向不压缩。可用内存多，垃圾回收器便不会压缩堆；这有利于增强性能，但会增大程序的工作集。使用并发垃圾回收器，应用程序消耗的内存通常比使用非并发垃圾回收器多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##大对象&lt;br&gt; CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目前版
    
    </summary>
    
      <category term="GC" scheme="http://codelover.link/categories/GC/"/>
    
    
  </entry>
  
  <entry>
    <title>C#LINQ 优点 总结(转载)</title>
    <link href="http://codelover.link/2016/03/15/LINQ-advantage/"/>
    <id>http://codelover.link/2016/03/15/LINQ-advantage/</id>
    <published>2016-03-14T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.794Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html" target="_blank" rel="external">http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html</a></p>
<p>这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。</p>
<p>由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。</p>
<p>（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）</p>
<p>LINQ的优点：</p>
<p>LINQ基本有以下七个优点，让我来一一举例说明：</p>
<p>#####1.Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：</p>
<p>(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：</p>
<p>语句高亮显示，类型检查，允许使用debugger调试</p>
<p>(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。</p>
<p>(3):集成后的语法更加的清晰易懂，可读性较高。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">比较： </div><div class="line"><span class="comment">//原来的格式</span></div><div class="line">SqlConnection sqlConn = <span class="keyword">new</span> SqlConnection(connectionString);&gt;</div><div class="line">sqlConn.Open();</div><div class="line">SqlCommand command = <span class="keyword">new</span> SqlCommand();</div><div class="line">command.Connection = sqlConn;</div><div class="line">command.CommandText = <span class="string">"Select * From Customer"</span>;</div><div class="line">SqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);</div><div class="line"> </div><div class="line"><span class="comment">//LINQ的格式</span></div><div class="line">NORTHWNDDataContext dc = <span class="keyword">new</span> NORTHWNDDataContext();</div><div class="line"><span class="keyword">var</span> query = <span class="keyword">from</span> c <span class="keyword">in</span> dc.Customers</div><div class="line">            <span class="keyword">select</span> c;</div></pre></td></tr></table></figure>
<p>#####2.Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。</p>
<p>使用统一化查询语言的好处在于以下几点：</p>
<p>你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。<br>由于使用了统一的语法，可以使代码维护变的更加简单。<br>以下代码体现了LINQ的统一化：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数据源:对象集合</span></div><div class="line"><span class="keyword">var</span> query = <span class="function"><span class="keyword">from</span> c <span class="keyword">in</span> <span class="title">GetCustomers</span>(<span class="params"></span>)</span></div><div class="line">            <span class="keyword">select</span> c;</div><div class="line"> </div><div class="line"><span class="comment">//数据源:SQL</span></div><div class="line"><span class="keyword">var</span> query1 = <span class="keyword">from</span> c <span class="keyword">in</span> dc.Customers</div><div class="line">             <span class="keyword">select</span> c;</div><div class="line"><span class="comment">//数据源:XML</span></div><div class="line"><span class="keyword">var</span> query2 = <span class="keyword">from</span> c <span class="keyword">in</span> customers.Descendants(<span class="string">"Customer"</span>)</div><div class="line">             <span class="keyword">select</span> c;</div></pre></td></tr></table></figure></p>
<p>#####3.Extensible：所谓Extensible(可扩展)指以下2个方面:</p>
<p>(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。</p>
<p>(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。</p>
<p>以下是些第三方的LINQ provider：</p>
<p>LINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google</p>
<p>#####4.Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。</p>
<p>Declarative programming(声明式编程)的优点体现在以下2点：</p>
<p>(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。</p>
<p>(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。</p>
<p>举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。</p>
<p>比较Declarative programming 与 Imperative programming：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明式编程</span></div><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; lists = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; &#123; <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;, <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">4</span>, <span class="number">5</span> &#125; &#125;;</div><div class="line"><span class="keyword">var</span> query = from list <span class="keyword">in</span> lists</div><div class="line">            from <span class="built_in">num</span> <span class="keyword">in</span> list</div><div class="line">            where <span class="built_in">num</span> % <span class="number">3</span> == <span class="number">0</span></div><div class="line">            orderby <span class="built_in">num</span> descending</div><div class="line">            select <span class="built_in">num</span>;</div><div class="line"> </div><div class="line"><span class="comment">//命令式编程</span></div><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list1 = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;();</div><div class="line">list1.Add(<span class="number">1</span>);</div><div class="line">list1.Add(<span class="number">2</span>);</div><div class="line">list1.Add(<span class="number">3</span>);</div><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list2 = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;();</div><div class="line">list2.Add(<span class="number">4</span>);</div><div class="line">list2.Add(<span class="number">5</span>);</div><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; lists1 = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt;();</div><div class="line">lists1.Add(list1);</div><div class="line">lists1.Add(list2);</div><div class="line"> </div><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; newList = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;();</div><div class="line">foreach (<span class="keyword">var</span> item <span class="keyword">in</span> lists1)</div><div class="line">      foreach (<span class="keyword">var</span> <span class="built_in">num</span> <span class="keyword">in</span> item)</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">num</span> % <span class="number">3</span> == <span class="number">0</span>)</div><div class="line">            newList.Add(<span class="built_in">num</span>);</div><div class="line">newList.Reverse();</div></pre></td></tr></table></figure></p>
<p>#####5.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。</p>
<p>SQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是</p>
<p>rectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。</p>
<p>这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。</p>
<p>#####6.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。</p>
<p>LINQ返回的结果都是基于接口：IEnumerable<t>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。</t></p>
<p>优点在于：</p>
<p>(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。</p>
<p>(2).便于代码维护。把代码拆分后能使代码变的更易理解。</p>
<p>以下代码体现了可组成性：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以下代码体现了Composable</span></div><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; lists = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; &#123; <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;</div><div class="line"> &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;, <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">4</span>, <span class="number">5</span> &#125; &#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> query1 = from list <span class="keyword">in</span> lists</div><div class="line">             from <span class="built_in">num</span> <span class="keyword">in</span> list</div><div class="line">             select <span class="built_in">num</span>;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> query2 = from <span class="built_in">num</span> <span class="keyword">in</span> query1</div><div class="line">             where <span class="built_in">num</span> % <span class="number">3</span> == <span class="number">0</span></div><div class="line">             select <span class="built_in">num</span>;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> query3 = from <span class="built_in">num</span> <span class="keyword">in</span> query2</div><div class="line">             orderby <span class="built_in">num</span> descending</div><div class="line">             select <span class="built_in">num</span>;</div></pre></td></tr></table></figure></p>
<p>######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。</p>
<p>方便用户做数据移植。</p>
<p>以下代码体现了转换的特性：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//把关系型数据转换成XML型</span></div><div class="line">	<span class="keyword">var</span> query = <span class="keyword">new</span> XElement(<span class="string">"Orders"</span>,</div><div class="line">            <span class="keyword">from</span> c <span class="keyword">in</span> dc.Customers</div><div class="line">            <span class="keyword">where</span> c.City == <span class="string">"Paris"</span></div><div class="line">            <span class="function"><span class="keyword">select</span> new <span class="title">XElement</span>(<span class="params"><span class="string">"Order"</span>,</span></span></div><div class="line">                new XAttribute(<span class="string">"Address"</span>, c.Address)));</div></pre></td></tr></table></figure></p>
<p>以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。</p>
<p>//2011/1/28 补充(LINQ TO SQL)</p>
<p>在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。</p>
<p><a href="http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html" target="_blank" rel="external">http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;htt
    
    </summary>
    
      <category term=".net" scheme="http://codelover.link/categories/net/"/>
    
    
  </entry>
  
  <entry>
    <title>.NET-join用法</title>
    <link href="http://codelover.link/2016/03/03/Join/"/>
    <id>http://codelover.link/2016/03/03/Join/</id>
    <published>2016-03-02T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.763Z</updated>
    
    <content type="html"><![CDATA[<p>#.NET   Join<br> 连接：内连接、外连接、左连接、右连接。<br>SQL的Join这里就不多说了，<br>今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。</p>
<p>Join用于连接数据，首先就是数据之间有联系咯。</p>
<p>先说Enumerable.Join()。<br>参数类型如下：<br>            public static IEnumerable<tresult> Join<touter, tinner,="" tkey,="" tresult=""><br>            (<br>                     this IEnumerable<touter> outer,<br>                    IEnumerable<tinner> inner,<br>                    Func<touter, tkey=""> outerKeySelector,<br>                    Func<tinner, tkey=""> innerKeySelector,<br>                    Func<touter, tinner,="" tresult=""> resultSelector<br>            )<br>类型参数<br>TOuter<br>第一个序列中的元素的类型。<br>TInner<br>第二个序列中的元素的类型。<br>TKey<br>键选择器函数返回的键的类型。<br>TResult<br>结果元素的类型。<br>参数<br>outer<br>类型：System.Collections.Generic.IEnumerable<touter><br>要联接的第一个序列。<br>inner<br>类型：System.Collections.Generic.IEnumerable<tinner><br>要与第一个序列联接的序列。<br>outerKeySelector<br>类型：System.Func<touter, tkey=""><br>用于从第一个序列的每个元素提取联接键的函数。<br>innerKeySelector<br>类型：System.Func<tinner, tkey=""><br>用于从第二个序列的每个元素提取联接键的函数。<br>resultSelector<br>类型：System.Func<touter, tinner,="" tresult=""><br>用于从两个匹配元素创建结果元素的函数。<br>返回值<br>类型：System.Collections.Generic.IEnumerable<tresult><br>IEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.” xml:space=”preserve”&gt;一个具有 TResult 类型元素的 IEnumerable<t>，这些元素是通过对两个序列执行内部联接得来的。<br>使用说明<br>在 Visual Basic 和 C# 中，可以在 IEnumerable<touter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。</touter></t></tresult></touter,></tinner,></touter,></tinner></touter></touter,></tinner,></touter,></tinner></touter></touter,></tresult></p>
<p>先上一个MSDN的例子。</p>
<pre><code>     public static void JoinEx1()         
     {
       Person magnus = new Person { Name = &quot;Hedlund, Magnus&quot; };
       Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };
       Person terry = new Person { Name = &quot;Adams, Terry&quot; };
       Person charlotte = new Person { Name = &quot;Weiss, 
       Charlotte&quot; };
       Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };
       Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, 
       Owner = charlotte};
       Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };

    List&lt;Person&gt; people = new List&lt;Person&gt; 
    { magnus, terry, charlotte };
    List&lt;Pet&gt; pets = new List&lt;Pet&gt; 
    { barley, boots, whiskers, daisy };

    // Create a list of Person-Pet pairs where 
    // each element is an anonymous type that contains a
    // Pet&apos;s name and the name of the Person that owns the Pet.
    var query =
        people.Join(
                    pets,//需要Join的另一个数据源
          person =&gt; person,//自己用来比较的key， lambda 表达式
     pet =&gt; pet.Owner,//另一个数据源用来比较的key， lambda 表达式
(person, pet) =&gt;new { OwnerName = person.Name, Pet = pet.Name } 
               //想要取出来的数据，支持匿名对象， lambda 表达式);
    foreach (var obj in query)
    {
      Console.WriteLine( &quot;{0} - {1}&quot;,obj.OwnerName,obj.Pet);
    }
}
</code></pre><p> LINQ的Join<br>同样是上面的数据，如果换成LINQ的Join，写法如下：<br>            var query = from person in people // 第一个数据源<br>                      join pet in pets            //第二个数据源<br>                      on person equals pet.Owner  //Join条件<br>                      select  new { OwnerName = person.Name, Pet = pet.Name };<br>                      //要到得到的数据。</p>
<p>上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接….<br>等我下次有心情再更新吧，再不走家里的键盘又要坏了。 </p>
<p>一些资料链接：<br><a href="https://msdn.microsoft.com/zh-cn/library/bb311040.aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/bb311040.aspx</a><br><a href="https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396</a><br><a href="http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html" target="_blank" rel="external">http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html</a><br><a href="http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html" target="_blank" rel="external">http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html</a><br><a href="http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html" target="_blank" rel="external">http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html</a> ; </p>
<p>LINQ GroupJoin 实现左连接<br>var queryGroup = from person in people // 第一个数据源<br>                                join pet in pets //第二个数据源<br>                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin<br>                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#.NET   Join&lt;br&gt; 连接：内连接、外连接、左连接、右连接。&lt;br&gt;SQL的Join这里就不多说了，&lt;br&gt;今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。&lt;/p&gt;
&lt;p&gt;Join用于连接数据，首先就是数据之间有联系咯。&lt;/
    
    </summary>
    
      <category term=".net" scheme="http://codelover.link/categories/net/"/>
    
    
  </entry>
  
  <entry>
    <title>.NET-lmabda避免修改绑定变量</title>
    <link href="http://codelover.link/2016/02/15/can&#39;t-modify-linq-object/"/>
    <id>http://codelover.link/2016/02/15/can&#39;t-modify-linq-object/</id>
    <published>2016-02-14T16:00:00.000Z</published>
    <updated>2016-10-15T05:20:24.851Z</updated>
    
    <content type="html"><![CDATA[<p>先看一段代码</p>
<pre><code>#region test1 闭包

public static void test1()
{
    int index = 0;
    Func&lt;IEnumerable&lt;int&gt;&gt; sequence =()=&gt;GetEnumrableInt(index);

    index = 20;
    foreach(int n in sequence())
        Console.WriteLine(n);

    Console.WriteLine(&quot;Done&quot;);

    index = 100;
    foreach (int n in sequence())
        Console.WriteLine(n);
}


public static IEnumerable&lt;int&gt; GetEnumrableInt(int index)
{
    List&lt;int&gt; l = new List&lt;int&gt;();
    for(int i=index;i&lt;index+30;i++)
    {
        l.Add(i);
    }
    return l;
}

#endregion
</code></pre><p>上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义…(书本这样说的，我到觉得很少会用到。)</p>
<p>为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 “静态委托”、”实例委托” 或 “闭包”。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。</p>
<p>并不是任何的lambda表达式都会生成同样结构的代码。</p>
<p>对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。  </p>
<pre><code>//我们的lambda表达式
public static void test2()
{
    int[] someNum = {0,1,2,3,4,5,6,7,8,9,10 };

    IEnumerable&lt;int&gt; ans = from n in someNum
                           select n * n;

    foreach (int i in ans)
        Console.WriteLine(i);

}
</code></pre><p>编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：</p>
<pre><code> //编译器为我们的lambda生成的代码
#region 等价于 test2()
private static int HiddenFunc(int n)
{
    return n * n;
}

//静态委托
private static Func&lt;int, int&gt; HiddenDelegate;

public void test2_1()
{

    int[] someNum = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    if(HiddenDelegate==null)
    {
        HiddenDelegate = new Func&lt;int, int&gt;(HiddenFunc);
    }
    IEnumerable&lt;int&gt; ans = someNum.Select&lt;int, int&gt;(HiddenDelegate);

  foreach(int i in ans)
      Console.WriteLine(i);

}
#endregion
</code></pre><p>这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。</p>
<p>接下来介绍另一种较为简单的情况：<br>lambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。</p>
<pre><code>public class ModFilter
{
    private readonly int modules;

    public ModFilter(int mod)
    {
        modules = mod;
    }


    public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)
    {

        return from n in sequence
               where n % modules == 0 //新添加的表达式
               select n * n;  //和前面的例子是一样的
    }
}
</code></pre><p>/* </p>
<p>在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。<br>其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。<br>与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。<br>如下：</p>
<p>*/</p>
<pre><code>public class ModFilter_Other
{
    private readonly int modules;


    //实例方法
    private bool WhereClause(int n)
    {
        return ((n%this.modules) ==0);
    }


    private static int SelectClause(int n)
    {
        return n * n;
    }

    private static Func&lt;int, int&gt; SelectDelegate;




    public ModFilter_Other(int mod)
    {
        modules = mod;
    }


    public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)
    {
        if(SelectDelegate==null)
        {
            SelectDelegate = new Func&lt;int, int&gt;(SelectClause);
        }

        return sequence.Where&lt;int&gt;(
            new Func&lt;int, bool&gt;(this.WhereClause)).
            Select&lt;int, int&gt;(SelectClause);
    }
}
</code></pre><p>概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。</p>
<p>不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。</p>
<p>这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。</p>
<p>局部变量必须传入到实现了lambda表达式主体部分的委托里。</p>
<p>此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。</p>
<p>当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。</p>
<p>我们来修改一下该实例方法，让其访问一个局部变量。</p>
<pre><code>public class ModFilter
{
      private readonly int modules;

      public ModFilter(int mod)
      {
          modules = mod;
      }


      public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)
      {
          int numValues = 0;

          return from n in sequence
                 where n % modules == 0 //新添加的表达式
                 select n * n / ++ numValues; //访问局部变量
      }
}
</code></pre><p>注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。</p>
<pre><code>  public class ModFilter
 {
    private sealed class Closure
    {
        public ModFilter outer;

        public int numValues;

        public int SelectClause(int n)
        {
            return ((n * n) / ++this.numValues);
        }
    }



    private readonly int modules;


    //实例方法
    private bool WhereClause(int n)
    {
        return ((n % this.modules) == 0);
    }

    public ModFilter(int mod)
    {
        modules = mod;
    }


    public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)
    {
        Closure c = new Closure();
        c.outer = this;
        c.numValues = 0;

        return sequence.Where&lt;int&gt;(
            new Func&lt;int, bool&gt;(this.WhereClause)).
            Select&lt;int, int&gt;(c.SelectClause);
    }
}
</code></pre><p>在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。</p>
<p>对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。</p>
<p>回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。</p>
<p>考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。<br>因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先看一段代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#region test1 闭包

public static void test1()
{
    int index = 0;
    Func&amp;lt;IEnumerable&amp;lt;int&amp;gt;&amp;gt; sequence =
    
    </summary>
    
      <category term=".net" scheme="http://codelover.link/categories/net/"/>
    
    
  </entry>
  
</feed>
