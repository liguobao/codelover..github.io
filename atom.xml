<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-02-22T15:22:29.489Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/02/22/hello-world/"/>
    <id>http://yoursite.com/2016/02/22/hello-world/</id>
    <published>2016-02-22T15:22:29.489Z</published>
    <updated>2016-02-22T15:22:29.489Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>.net LINQ</title>
    <link href="http://yoursite.com/2016/02/22/LINQ%20%E4%BC%98%E7%82%B9%20%E6%80%BB%E7%BB%93(%E8%BD%AC%E8%BD%BD)/"/>
    <id>http://yoursite.com/2016/02/22/LINQ 优点 总结(转载)/</id>
    <published>2016-02-22T15:02:37.441Z</published>
    <updated>2015-11-06T14:48:41.089Z</updated>
    
    <content type="html">&lt;p&gt;##LINQ 优点 总结(转载)&lt;br&gt;原文链接：&lt;a href=&quot;http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。&lt;/p&gt;
&lt;p&gt;由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。&lt;/p&gt;
&lt;p&gt;（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）&lt;/p&gt;
&lt;p&gt;LINQ的优点：&lt;/p&gt;
&lt;p&gt;LINQ基本有以下七个优点，让我来一一举例说明：&lt;/p&gt;
&lt;p&gt;#####1.Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：&lt;/p&gt;
&lt;p&gt;(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：&lt;/p&gt;
&lt;p&gt;语句高亮显示，类型检查，允许使用debugger调试&lt;/p&gt;
&lt;p&gt;(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。&lt;/p&gt;
&lt;p&gt;(3):集成后的语法更加的清晰易懂，可读性较高。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#27604;&amp;#36739;&amp;#65306; &amp;#10;//&amp;#21407;&amp;#26469;&amp;#30340;&amp;#26684;&amp;#24335;&amp;#10;SqlConnection sqlConn = new SqlConnection(connectionString);&amp;#62;&amp;#10;sqlConn.Open();&amp;#10;SqlCommand command = new SqlCommand();&amp;#10;command.Connection = sqlConn;&amp;#10;command.CommandText = &amp;#34;Select * From Customer&amp;#34;;&amp;#10;SqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);&amp;#10; &amp;#10;//LINQ&amp;#30340;&amp;#26684;&amp;#24335;&amp;#10;NORTHWNDDataContext dc = new NORTHWNDDataContext();&amp;#10;var query = from c in dc.Customers&amp;#10;            select c;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#####2.Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。&lt;/p&gt;
&lt;p&gt;使用统一化查询语言的好处在于以下几点：&lt;/p&gt;
&lt;p&gt;你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。&lt;br&gt;由于使用了统一的语法，可以使代码维护变的更加简单。&lt;br&gt;以下代码体现了LINQ的统一化：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//&amp;#25968;&amp;#25454;&amp;#28304;:&amp;#23545;&amp;#35937;&amp;#38598;&amp;#21512;&amp;#10;var query = from c in GetCustomers()&amp;#10;            select c;&amp;#10; &amp;#10;//&amp;#25968;&amp;#25454;&amp;#28304;:SQL&amp;#10;var query1 = from c in dc.Customers&amp;#10;             select c;&amp;#10;//&amp;#25968;&amp;#25454;&amp;#28304;:XML&amp;#10;var query2 = from c in customers.Descendants(&amp;#34;Customer&amp;#34;)&amp;#10;             select c;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;#####3.Extensible：所谓Extensible(可扩展)指以下2个方面:&lt;/p&gt;
&lt;p&gt;(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。&lt;/p&gt;
&lt;p&gt;(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。&lt;/p&gt;
&lt;p&gt;以下是些第三方的LINQ provider：&lt;/p&gt;
&lt;p&gt;LINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google&lt;/p&gt;
&lt;p&gt;#####4.Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。&lt;/p&gt;
&lt;p&gt;Declarative programming(声明式编程)的优点体现在以下2点：&lt;/p&gt;
&lt;p&gt;(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。&lt;/p&gt;
&lt;p&gt;(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。&lt;/p&gt;
&lt;p&gt;举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。&lt;/p&gt;
&lt;p&gt;比较Declarative programming 与 Imperative programming：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//&amp;#22768;&amp;#26126;&amp;#24335;&amp;#32534;&amp;#31243;&amp;#10;List&amp;#60;List&amp;#60;int&amp;#62;&amp;#62; lists = new List&amp;#60;List&amp;#60;int&amp;#62;&amp;#62; &amp;#123; new List&amp;#60;int&amp;#62; &amp;#123; 1, 2, 3 &amp;#125;, new List&amp;#60;int&amp;#62; &amp;#123; 4, 5 &amp;#125; &amp;#125;;&amp;#10;var query = from list in lists&amp;#10;            from num in list&amp;#10;            where num % 3 == 0&amp;#10;            orderby num descending&amp;#10;            select num;&amp;#10; &amp;#10;//&amp;#21629;&amp;#20196;&amp;#24335;&amp;#32534;&amp;#31243;&amp;#10;List&amp;#60;int&amp;#62; list1 = new List&amp;#60;int&amp;#62;();&amp;#10;list1.Add(1);&amp;#10;list1.Add(2);&amp;#10;list1.Add(3);&amp;#10;List&amp;#60;int&amp;#62; list2 = new List&amp;#60;int&amp;#62;();&amp;#10;list2.Add(4);&amp;#10;list2.Add(5);&amp;#10;List&amp;#60;List&amp;#60;int&amp;#62;&amp;#62; lists1 = new List&amp;#60;List&amp;#60;int&amp;#62;&amp;#62;();&amp;#10;lists1.Add(list1);&amp;#10;lists1.Add(list2);&amp;#10; &amp;#10;List&amp;#60;int&amp;#62; newList = new List&amp;#60;int&amp;#62;();&amp;#10;foreach (var item in lists1)&amp;#10;      foreach (var num in item)&amp;#10;        if (num % 3 == 0)&amp;#10;            newList.Add(num);&amp;#10;newList.Reverse();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;#####5.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。&lt;/p&gt;
&lt;p&gt;SQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是&lt;/p&gt;
&lt;p&gt;rectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。&lt;/p&gt;
&lt;p&gt;这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。&lt;/p&gt;
&lt;p&gt;#####6.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。&lt;/p&gt;
&lt;p&gt;LINQ返回的结果都是基于接口：IEnumerable&lt;t&gt;，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。&lt;/t&gt;&lt;/p&gt;
&lt;p&gt;优点在于：&lt;/p&gt;
&lt;p&gt;(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。&lt;/p&gt;
&lt;p&gt;(2).便于代码维护。把代码拆分后能使代码变的更易理解。&lt;/p&gt;
&lt;p&gt;以下代码体现了可组成性：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//&amp;#20197;&amp;#19979;&amp;#20195;&amp;#30721;&amp;#20307;&amp;#29616;&amp;#20102;Composable&amp;#10;List&amp;#60;List&amp;#60;int&amp;#62;&amp;#62; lists = new List&amp;#60;List&amp;#60;int&amp;#62;&amp;#62; &amp;#123; new List&amp;#60;int&amp;#62;&amp;#10; &amp;#123; 1, 2, 3 &amp;#125;, new List&amp;#60;int&amp;#62; &amp;#123; 4, 5 &amp;#125; &amp;#125;;&amp;#10; &amp;#10;var query1 = from list in lists&amp;#10;             from num in list&amp;#10;             select num;&amp;#10; &amp;#10;var query2 = from num in query1&amp;#10;             where num % 3 == 0&amp;#10;             select num;&amp;#10; &amp;#10;var query3 = from num in query2&amp;#10;             orderby num descending&amp;#10;             select num;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。&lt;/p&gt;
&lt;p&gt;方便用户做数据移植。&lt;/p&gt;
&lt;p&gt;以下代码体现了转换的特性：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//&amp;#25226;&amp;#20851;&amp;#31995;&amp;#22411;&amp;#25968;&amp;#25454;&amp;#36716;&amp;#25442;&amp;#25104;XML&amp;#22411;&amp;#10;&amp;#9;var query = new XElement(&amp;#34;Orders&amp;#34;,&amp;#10;            from c in dc.Customers&amp;#10;            where c.City == &amp;#34;Paris&amp;#34;&amp;#10;            select new XElement(&amp;#34;Order&amp;#34;,&amp;#10;                new XAttribute(&amp;#34;Address&amp;#34;, c.Address)));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。&lt;/p&gt;
&lt;p&gt;//2011/1/28 补充(LINQ TO SQL)&lt;/p&gt;
&lt;p&gt;在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html&lt;/a&gt; &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;##LINQ 优点 总结(转载)&lt;br&gt;原文链接：&lt;a href=&quot;http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html&quot; target=&quot;_blank
    
    </summary>
    
      <category term="another" scheme="http://yoursite.com/categories/another/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/02/22/%E9%81%BF%E5%85%8D%E4%BF%AE%E6%94%B9%E7%BB%91%E5%AE%9A%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2016/02/22/避免修改绑定变量/</id>
    <published>2016-02-22T15:02:37.441Z</published>
    <updated>2016-02-22T14:52:41.902Z</updated>
    
    <content type="html">&lt;p&gt;##.NET lmabda避免修改绑定变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#region test1 闭包

public static void test1()
{
    int index = 0;
    Func&amp;lt;IEnumerable&amp;lt;int&amp;gt;&amp;gt; sequence =()=&amp;gt;GetEnumrableInt(index);

    index = 20;
    foreach(int n in sequence())
        Console.WriteLine(n);

    Console.WriteLine(&amp;quot;Done&amp;quot;);

    index = 100;
    foreach (int n in sequence())
        Console.WriteLine(n);
}


public static IEnumerable&amp;lt;int&amp;gt; GetEnumrableInt(int index)
{
    List&amp;lt;int&amp;gt; l = new List&amp;lt;int&amp;gt;();
    for(int i=index;i&amp;lt;index+30;i++)
    {
        l.Add(i);
    }
    return l;
}

#endregion
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义…(书本这样说的，我到觉得很少会用到。)&lt;/p&gt;
&lt;p&gt;为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 “静态委托”、”实例委托” 或 “闭包”。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。&lt;/p&gt;
&lt;p&gt;并不是任何的lambda表达式都会生成同样结构的代码。&lt;/p&gt;
&lt;p&gt;对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//我们的lambda表达式
public static void test2()
{
    int[] someNum = {0,1,2,3,4,5,6,7,8,9,10 };

    IEnumerable&amp;lt;int&amp;gt; ans = from n in someNum
                           select n * n;

    foreach (int i in ans)
        Console.WriteLine(i);

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; //编译器为我们的lambda生成的代码
#region 等价于 test2()
private static int HiddenFunc(int n)
{
    return n * n;
}

//静态委托
private static Func&amp;lt;int, int&amp;gt; HiddenDelegate;

public void test2_1()
{

    int[] someNum = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    if(HiddenDelegate==null)
    {
        HiddenDelegate = new Func&amp;lt;int, int&amp;gt;(HiddenFunc);
    }
    IEnumerable&amp;lt;int&amp;gt; ans = someNum.Select&amp;lt;int, int&amp;gt;(HiddenDelegate);

  foreach(int i in ans)
      Console.WriteLine(i);

}
#endregion
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。&lt;/p&gt;
&lt;p&gt;接下来介绍另一种较为简单的情况：&lt;br&gt;lambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ModFilter
{
    private readonly int modules;

    public ModFilter(int mod)
    {
        modules = mod;
    }


    public IEnumerable&amp;lt;int&amp;gt; FindValues(IEnumerable&amp;lt;int&amp;gt; sequence)
    {

        return from n in sequence
               where n % modules == 0 //新添加的表达式
               select n * n;  //和前面的例子是一样的
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/* &lt;/p&gt;
&lt;p&gt;在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。&lt;br&gt;其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。&lt;br&gt;与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。&lt;br&gt;如下：&lt;/p&gt;
&lt;p&gt;*/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ModFilter_Other
{
    private readonly int modules;


    //实例方法
    private bool WhereClause(int n)
    {
        return ((n%this.modules) ==0);
    }


    private static int SelectClause(int n)
    {
        return n * n;
    }

    private static Func&amp;lt;int, int&amp;gt; SelectDelegate;




    public ModFilter_Other(int mod)
    {
        modules = mod;
    }


    public IEnumerable&amp;lt;int&amp;gt; FindValues(IEnumerable&amp;lt;int&amp;gt; sequence)
    {
        if(SelectDelegate==null)
        {
            SelectDelegate = new Func&amp;lt;int, int&amp;gt;(SelectClause);
        }

        return sequence.Where&amp;lt;int&amp;gt;(
            new Func&amp;lt;int, bool&amp;gt;(this.WhereClause)).
            Select&amp;lt;int, int&amp;gt;(SelectClause);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。&lt;/p&gt;
&lt;p&gt;不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。&lt;/p&gt;
&lt;p&gt;这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。&lt;/p&gt;
&lt;p&gt;局部变量必须传入到实现了lambda表达式主体部分的委托里。&lt;/p&gt;
&lt;p&gt;此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。&lt;/p&gt;
&lt;p&gt;当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。&lt;/p&gt;
&lt;p&gt;我们来修改一下该实例方法，让其访问一个局部变量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ModFilter
{
      private readonly int modules;

      public ModFilter(int mod)
      {
          modules = mod;
      }


      public IEnumerable&amp;lt;int&amp;gt; FindValues(IEnumerable&amp;lt;int&amp;gt; sequence)
      {
          int numValues = 0;

          return from n in sequence
                 where n % modules == 0 //新添加的表达式
                 select n * n / ++ numValues; //访问局部变量
      }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class ModFilter
 {
    private sealed class Closure
    {
        public ModFilter outer;

        public int numValues;

        public int SelectClause(int n)
        {
            return ((n * n) / ++this.numValues);
        }
    }



    private readonly int modules;


    //实例方法
    private bool WhereClause(int n)
    {
        return ((n % this.modules) == 0);
    }

    public ModFilter(int mod)
    {
        modules = mod;
    }


    public IEnumerable&amp;lt;int&amp;gt; FindValues(IEnumerable&amp;lt;int&amp;gt; sequence)
    {
        Closure c = new Closure();
        c.outer = this;
        c.numValues = 0;

        return sequence.Where&amp;lt;int&amp;gt;(
            new Func&amp;lt;int, bool&amp;gt;(this.WhereClause)).
            Select&amp;lt;int, int&amp;gt;(c.SelectClause);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。&lt;/p&gt;
&lt;p&gt;对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。&lt;/p&gt;
&lt;p&gt;回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。&lt;/p&gt;
&lt;p&gt;考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。&lt;br&gt;因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;##.NET lmabda避免修改绑定变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#region test1 闭包

public static void test1()
{
    int index = 0;
    Func&amp;lt;IEnumerable&amp;lt;int&amp;gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>.net-join</title>
    <link href="http://yoursite.com/2016/02/22/NET-Join/"/>
    <id>http://yoursite.com/2016/02/22/NET-Join/</id>
    <published>2016-02-22T15:02:37.441Z</published>
    <updated>2015-11-06T14:34:07.639Z</updated>
    
    <content type="html">&lt;p&gt;#.NET   Join&lt;br&gt; 连接：内连接、外连接、左连接、右连接。&lt;br&gt;SQL的Join这里就不多说了，&lt;br&gt;今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。&lt;/p&gt;
&lt;p&gt;Join用于连接数据，首先就是数据之间有联系咯。&lt;/p&gt;
&lt;p&gt;先说Enumerable.Join()。&lt;br&gt;参数类型如下：&lt;br&gt;            public static IEnumerable&lt;tresult&gt; Join&lt;touter, tinner,=&quot;&quot; tkey,=&quot;&quot; tresult=&quot;&quot;&gt;&lt;br&gt;            (&lt;br&gt;                     this IEnumerable&lt;touter&gt; outer,&lt;br&gt;                    IEnumerable&lt;tinner&gt; inner,&lt;br&gt;                    Func&lt;touter, tkey=&quot;&quot;&gt; outerKeySelector,&lt;br&gt;                    Func&lt;tinner, tkey=&quot;&quot;&gt; innerKeySelector,&lt;br&gt;                    Func&lt;touter, tinner,=&quot;&quot; tresult=&quot;&quot;&gt; resultSelector&lt;br&gt;            )&lt;br&gt;类型参数&lt;br&gt;TOuter&lt;br&gt;第一个序列中的元素的类型。&lt;br&gt;TInner&lt;br&gt;第二个序列中的元素的类型。&lt;br&gt;TKey&lt;br&gt;键选择器函数返回的键的类型。&lt;br&gt;TResult&lt;br&gt;结果元素的类型。&lt;br&gt;参数&lt;br&gt;outer&lt;br&gt;类型：System.Collections.Generic.IEnumerable&lt;touter&gt;&lt;br&gt;要联接的第一个序列。&lt;br&gt;inner&lt;br&gt;类型：System.Collections.Generic.IEnumerable&lt;tinner&gt;&lt;br&gt;要与第一个序列联接的序列。&lt;br&gt;outerKeySelector&lt;br&gt;类型：System.Func&lt;touter, tkey=&quot;&quot;&gt;&lt;br&gt;用于从第一个序列的每个元素提取联接键的函数。&lt;br&gt;innerKeySelector&lt;br&gt;类型：System.Func&lt;tinner, tkey=&quot;&quot;&gt;&lt;br&gt;用于从第二个序列的每个元素提取联接键的函数。&lt;br&gt;resultSelector&lt;br&gt;类型：System.Func&lt;touter, tinner,=&quot;&quot; tresult=&quot;&quot;&gt;&lt;br&gt;用于从两个匹配元素创建结果元素的函数。&lt;br&gt;返回值&lt;br&gt;类型：System.Collections.Generic.IEnumerable&lt;tresult&gt;&lt;br&gt;IEnumerable&amp;lt;T&amp;gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.” xml:space=”preserve”&amp;gt;一个具有 TResult 类型元素的 IEnumerable&lt;t&gt;，这些元素是通过对两个序列执行内部联接得来的。&lt;br&gt;使用说明&lt;br&gt;在 Visual Basic 和 C# 中，可以在 IEnumerable&lt;touter&gt; 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。&lt;/touter&gt;&lt;/t&gt;&lt;/tresult&gt;&lt;/touter,&gt;&lt;/tinner,&gt;&lt;/touter,&gt;&lt;/tinner&gt;&lt;/touter&gt;&lt;/touter,&gt;&lt;/tinner,&gt;&lt;/touter,&gt;&lt;/tinner&gt;&lt;/touter&gt;&lt;/touter,&gt;&lt;/tresult&gt;&lt;/p&gt;
&lt;p&gt;先上一个MSDN的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     public static void JoinEx1()         
     {
       Person magnus = new Person { Name = &amp;quot;Hedlund, Magnus&amp;quot; };
       Pet barley = new Pet { Name = &amp;quot;Barley&amp;quot;, Owner = terry };
       Person terry = new Person { Name = &amp;quot;Adams, Terry&amp;quot; };
       Person charlotte = new Person { Name = &amp;quot;Weiss, 
       Charlotte&amp;quot; };
       Pet boots = new Pet { Name = &amp;quot;Boots&amp;quot;, Owner = terry };
       Pet whiskers = new Pet { Name = &amp;quot;Whiskers&amp;quot;, 
       Owner = charlotte};
       Pet daisy = new Pet { Name = &amp;quot;Daisy&amp;quot;, Owner = magnus };

    List&amp;lt;Person&amp;gt; people = new List&amp;lt;Person&amp;gt; 
    { magnus, terry, charlotte };
    List&amp;lt;Pet&amp;gt; pets = new List&amp;lt;Pet&amp;gt; 
    { barley, boots, whiskers, daisy };

    // Create a list of Person-Pet pairs where 
    // each element is an anonymous type that contains a
    // Pet&amp;apos;s name and the name of the Person that owns the Pet.
    var query =
        people.Join(
                    pets,//需要Join的另一个数据源
          person =&amp;gt; person,//自己用来比较的key， lambda 表达式
     pet =&amp;gt; pet.Owner,//另一个数据源用来比较的key， lambda 表达式
(person, pet) =&amp;gt;new { OwnerName = person.Name, Pet = pet.Name } 
               //想要取出来的数据，支持匿名对象， lambda 表达式);
    foreach (var obj in query)
    {
      Console.WriteLine( &amp;quot;{0} - {1}&amp;quot;,obj.OwnerName,obj.Pet);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; LINQ的Join&lt;br&gt;同样是上面的数据，如果换成LINQ的Join，写法如下：&lt;br&gt;            var query = from person in people // 第一个数据源&lt;br&gt;                      join pet in pets            //第二个数据源&lt;br&gt;                      on person equals pet.Owner  //Join条件&lt;br&gt;                      select  new { OwnerName = person.Name, Pet = pet.Name };&lt;br&gt;                      //要到得到的数据。&lt;/p&gt;
&lt;p&gt;上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接….&lt;br&gt;等我下次有心情再更新吧，再不走家里的键盘又要坏了。 &lt;/p&gt;
&lt;p&gt;一些资料链接：&lt;br&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/bb311040.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://msdn.microsoft.com/zh-cn/library/bb311040.aspx&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html&lt;/a&gt; ; &lt;/p&gt;
&lt;p&gt;LINQ GroupJoin 实现左连接&lt;br&gt;var queryGroup = from person in people // 第一个数据源&lt;br&gt;                                join pet in pets //第二个数据源&lt;br&gt;                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin&lt;br&gt;                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#.NET   Join&lt;br&gt; 连接：内连接、外连接、左连接、右连接。&lt;br&gt;SQL的Join这里就不多说了，&lt;br&gt;今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。&lt;/p&gt;
&lt;p&gt;Join用于连接数据，首先就是数据之间有联系咯。&lt;/
    
    </summary>
    
      <category term="another" scheme="http://yoursite.com/categories/another/"/>
    
    
  </entry>
  
</feed>
